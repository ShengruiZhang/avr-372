
Lab_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000300  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000300  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800202  00800202  00000396  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000396  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001020  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d6f  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a3  00000000  00000000  00002237  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  000028dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e3  00000000  00000000  00002a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b8  00000000  00000000  000030e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000329f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	42 c1       	rjmp	.+644    	; 0x2aa <__vector_9>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	c8 c0       	rjmp	.+400    	; 0x1e6 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e0       	ldi	r30, 0x00	; 0
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 30       	cpi	r26, 0x08	; 8
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	1a d0       	rcall	.+52     	; 0x154 <main>
 120:	ed c0       	rjmp	.+474    	; 0x2fc <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_button_PA>:
#include <avr/io.h>

#include "button.h"

void init_button_PA() {
	DDRB = 0;	// Port B as input
 124:	14 b8       	out	0x04, r1	; 4
	DDRB |= 1 << PB7;	//  PB7 as button indicator
 126:	27 9a       	sbi	0x04, 7	; 4
	
	PORTB |= 1 << PB3;	// Use PB# pull-up
 128:	2b 9a       	sbi	0x05, 3	; 5
	
	PCICR |= 1 << PCIE0;	// Enable PCINT 8:0
 12a:	e8 e6       	ldi	r30, 0x68	; 104
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	81 60       	ori	r24, 0x01	; 1
 132:	80 83       	st	Z, r24
	
	PCMSK0 |= 1 << PCINT3;	// Enable PCINT3
 134:	eb e6       	ldi	r30, 0x6B	; 107
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	88 60       	ori	r24, 0x08	; 8
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <init_LED_PA>:

#include "global_macro.h"
#include "led.h"

void init_LED_PA() {
	 DDRA |= (1 << DDA0) | (1 << DDA1) | (1 << DDA2) | (1 << DDA3);
 140:	81 b1       	in	r24, 0x01	; 1
 142:	8f 60       	ori	r24, 0x0F	; 15
 144:	81 b9       	out	0x01, r24	; 1
 146:	08 95       	ret

00000148 <LED_set_status>:
}

void LED_set_status(uchar led_status_bit) {
	PORTA = (PORTA & 0xF0) | (0x0F & led_status_bit);
 148:	92 b1       	in	r25, 0x02	; 2
 14a:	90 7f       	andi	r25, 0xF0	; 240
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	89 2b       	or	r24, r25
 150:	82 b9       	out	0x02, r24	; 2
 152:	08 95       	ret

00000154 <main>:
volatile enum LED_State _LED_Speed = _State_LED_slow;
volatile enum Button_State _Button_State_PB3 = _State_Button_released;

int main(void)
{
	sei();	// Enable global interrupt
 154:	78 94       	sei
	
	init_LED_PA();
 156:	f4 df       	rcall	.-24     	; 0x140 <init_LED_PA>
	init_button_PA();
 158:	e5 df       	rcall	.-54     	; 0x124 <init_button_PA>
	
	init_timer_8();
 15a:	c2 d0       	rcall	.+388    	; 0x2e0 <init_timer_8>
 15c:	92 e0       	ldi	r25, 0x02	; 2
    while (1)
	{
		switch(_Button_State_PB3) {
			case _State_Button_to_pressed:
			_delay_ms(30);	// Debounce
			_Button_State_PB3 = _State_Button_pressed;
 15e:	61 e0       	ldi	r22, 0x01	; 1
			case _State_Button_to_released:
			_delay_ms(30);	// Debounce
			
			if (_LED_Speed == _State_LED_slow)
			{
				_LED_Speed = _State_LED_fast;
 160:	4c eb       	ldi	r20, 0xBC	; 188
			break;
		}
		
		switch(_LED_Speed) {
			case _State_LED_slow:
			_LED_frequency = 700;
 162:	52 e0       	ldi	r21, 0x02	; 2
 164:	2a ef       	ldi	r18, 0xFA	; 250
			break;
			
			case _State_LED_fast:
			_LED_frequency = 250;
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
	
	init_timer_8();
		
    while (1)
	{
		switch(_Button_State_PB3) {
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	31 f0       	breq	.+12     	; 0x17c <main+0x28>
 170:	40 f1       	brcs	.+80     	; 0x1c2 <main+0x6e>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	79 f0       	breq	.+30     	; 0x194 <main+0x40>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	79 f0       	breq	.+30     	; 0x198 <main+0x44>
 17a:	24 c0       	rjmp	.+72     	; 0x1c4 <main+0x70>
 17c:	7f ef       	ldi	r23, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	86 e7       	ldi	r24, 0x76	; 118
 180:	e1 e0       	ldi	r30, 0x01	; 1
 182:	71 50       	subi	r23, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	e0 40       	sbci	r30, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x2e>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x38>
 18c:	00 00       	nop
 18e:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__data_end>
			case _State_Button_to_pressed:
			_delay_ms(30);	// Debounce
			_Button_State_PB3 = _State_Button_pressed;
 192:	18 c0       	rjmp	.+48     	; 0x1c4 <main+0x70>
			break;
 194:	2f 9a       	sbi	0x05, 7	; 5
			
			case _State_Button_pressed:
			PORTB |= 1 << PB7;	// Turn on indicator
 196:	16 c0       	rjmp	.+44     	; 0x1c4 <main+0x70>
			break;
 198:	7f ef       	ldi	r23, 0xFF	; 255
 19a:	86 e7       	ldi	r24, 0x76	; 118
 19c:	e1 e0       	ldi	r30, 0x01	; 1
 19e:	71 50       	subi	r23, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	e0 40       	sbci	r30, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0x4a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x54>
 1a8:	00 00       	nop
 1aa:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <_LED_Speed>
			
			case _State_Button_to_released:
			_delay_ms(30);	// Debounce
			
			if (_LED_Speed == _State_LED_slow)
 1ae:	81 11       	cpse	r24, r1
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <main+0x64>
 1b2:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <_LED_Speed>
			{
				_LED_Speed = _State_LED_fast;
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <main+0x68>
 1b8:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <_LED_Speed>
			}
			else {
				_LED_Speed = _State_LED_slow;
 1bc:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
			}
			
			_Button_State_PB3 = _State_Button_released;
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <main+0x70>
			break;
 1c2:	2f 98       	cbi	0x05, 7	; 5
			
			case _State_Button_released:
			PORTB &= ~(_BV(7));	// Turn off indicator
 1c4:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <_LED_Speed>
			break;
		}
		
		switch(_LED_Speed) {
 1c8:	88 23       	and	r24, r24
 1ca:	19 f0       	breq	.+6      	; 0x1d2 <main+0x7e>
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	31 f0       	breq	.+12     	; 0x1dc <main+0x88>
 1d0:	cb cf       	rjmp	.-106    	; 0x168 <main+0x14>
 1d2:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <_LED_frequency+0x1>
			case _State_LED_slow:
			_LED_frequency = 700;
 1d6:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <_LED_frequency>
 1da:	c6 cf       	rjmp	.-116    	; 0x168 <main+0x14>
			break;
 1dc:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <_LED_frequency+0x1>
			
			case _State_LED_fast:
			_LED_frequency = 250;
 1e0:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <_LED_frequency>
 1e4:	c1 cf       	rjmp	.-126    	; 0x168 <main+0x14>

000001e6 <__vector_21>:
			break;
 1e6:	1f 92       	push	r1
	}
}


// Timer0 Compare Match Interrupt Vector
ISR(TIMER0_COMPA_vect) {
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	0b b6       	in	r0, 0x3b	; 59
 1f2:	0f 92       	push	r0
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	5f 93       	push	r21
 1fc:	6f 93       	push	r22
 1fe:	7f 93       	push	r23
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
	
	++_LED_delay;
 20c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_LED_delay>
 210:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <_LED_delay+0x1>
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_LED_delay+0x1>
 21a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_LED_delay>
	
	if (_LED_delay == _LED_frequency)
 21e:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <_LED_delay>
 222:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <_LED_delay+0x1>
 226:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_LED_frequency>
 22a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_LED_frequency+0x1>
 22e:	28 17       	cp	r18, r24
 230:	39 07       	cpc	r19, r25
 232:	c9 f4       	brne	.+50     	; 0x266 <__vector_21+0x80>
	{
		++_LED_status;	// Increment decimal digit
 234:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_LED_status>
 238:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <_LED_status+0x1>
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <_LED_status+0x1>
 242:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_LED_status>
		
		if (_LED_status > 15)
 246:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_LED_status>
 24a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <_LED_status+0x1>
 24e:	40 97       	sbiw	r24, 0x10	; 16
 250:	20 f0       	brcs	.+8      	; 0x25a <__vector_21+0x74>
		{
			_LED_status = 0;	// Reset when excesses 4 bits
 252:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <_LED_status+0x1>
 256:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <_LED_status>
		}
		
		LED_set_status(_LED_status);	// Set LEDs
 25a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_LED_status>
 25e:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <_LED_status+0x1>
 262:	72 df       	rcall	.-284    	; 0x148 <LED_set_status>
 264:	0f c0       	rjmp	.+30     	; 0x284 <__vector_21+0x9e>
	}
	else if (_LED_delay > _LED_frequency)
 266:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <_LED_delay>
 26a:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <_LED_delay+0x1>
 26e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_LED_frequency>
 272:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_LED_frequency+0x1>
 276:	82 17       	cp	r24, r18
 278:	93 07       	cpc	r25, r19
 27a:	20 f4       	brcc	.+8      	; 0x284 <__vector_21+0x9e>
	{
		_LED_delay = 0;
 27c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <_LED_delay+0x1>
 280:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <_LED_delay>
	}
}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	bf 91       	pop	r27
 28a:	af 91       	pop	r26
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	7f 91       	pop	r23
 292:	6f 91       	pop	r22
 294:	5f 91       	pop	r21
 296:	4f 91       	pop	r20
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0b be       	out	0x3b, r0	; 59
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <__vector_9>:


// Pin Change Interrupt Vector
ISR(PCINT0_vect) {
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	8f 93       	push	r24
	// Button can either be pressed or released
	if (_Button_State_PB3 == _State_Button_released)
 2b6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 2ba:	81 11       	cpse	r24, r1
 2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <__vector_9+0x1c>
	{
		// The button is being pressed, so process to debounce
		_Button_State_PB3 = _State_Button_to_pressed;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 2c4:	07 c0       	rjmp	.+14     	; 0x2d4 <__vector_9+0x2a>
	}
	else if (_Button_State_PB3 == _State_Button_pressed)
 2c6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 2ca:	82 30       	cpi	r24, 0x02	; 2
 2cc:	19 f4       	brne	.+6      	; 0x2d4 <__vector_9+0x2a>
	{
		// The button is being released, process debounce
		_Button_State_PB3 = _State_Button_to_released;
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
	}
}
 2d4:	8f 91       	pop	r24
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <init_timer_8>:
#include <avr/io.h>
#include "timer.h"

void init_timer_8() {
	TCCR0A |= 1 << WGM01;	// Set to CTC mode
 2e0:	84 b5       	in	r24, 0x24	; 36
 2e2:	82 60       	ori	r24, 0x02	; 2
 2e4:	84 bd       	out	0x24, r24	; 36
	
	OCR0A = 15;	// 1 ms on match 
 2e6:	8f e0       	ldi	r24, 0x0F	; 15
 2e8:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= 1 << OCIE0A;	// Enable compare A match interrupt
 2ea:	ee e6       	ldi	r30, 0x6E	; 110
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	82 60       	ori	r24, 0x02	; 2
 2f2:	80 83       	st	Z, r24
	
	TCCR0B |= (1 << CS02) | (1 << CS00);	// Start timer with 1024 prescaler
 2f4:	85 b5       	in	r24, 0x25	; 37
 2f6:	85 60       	ori	r24, 0x05	; 5
 2f8:	85 bd       	out	0x25, r24	; 37
 2fa:	08 95       	ret

000002fc <_exit>:
 2fc:	f8 94       	cli

000002fe <__stop_program>:
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <__stop_program>
