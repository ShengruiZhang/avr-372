
Lab_5_sample_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  000003c8  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800210  00800210  0000046c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013e3  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e76  00000000  00000000  0000195f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ce  00000000  00000000  000027d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00002fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065e  00000000  00000000  000030b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000259  00000000  00000000  00003712  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000396b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ec       	ldi	r30, 0xC8	; 200
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e1       	ldi	r26, 0x10	; 16
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 31       	cpi	r26, 0x1D	; 29
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	62 d0       	rcall	.+196    	; 0x1e4 <main>
 120:	51 c1       	rjmp	.+674    	; 0x3c4 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initI2C>:
#include <avr/io.h>
#include "i2c.h"
void initI2C() {
	
	
	TWSR |= (1 << TWPS0);  // prescaler power = 1
 124:	e9 eb       	ldi	r30, 0xB9	; 185
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	80 83       	st	Z, r24
	TWSR &= ~(1 << TWPS1); // prescaler power = 1
 12e:	80 81       	ld	r24, Z
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	80 83       	st	Z, r24
	TWBR = 0xC6; // bit rate generator = 10k  (TWBR = 198)
 134:	86 ec       	ldi	r24, 0xC6	; 198
 136:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>

	TWCR |= (1 << TWINT )| (1 << TWEN); // enable two wire interface
 13a:	ec eb       	ldi	r30, 0xBC	; 188
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	84 68       	ori	r24, 0x84	; 132
 142:	80 83       	st	Z, r24
 144:	08 95       	ret

00000146 <StartI2C_Trans>:
}


void StartI2C_Trans(unsigned char SLA) {
	// this function initiates a start condition and calls slave device with SLA
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); // clear TWINT, intiate a start condition and enable
 146:	94 ea       	ldi	r25, 0xA4	; 164
 148:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	wait_for_completion;
 14c:	ec eb       	ldi	r30, 0xBC	; 188
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	90 81       	ld	r25, Z
 152:	99 23       	and	r25, r25
 154:	ec f7       	brge	.-6      	; 0x150 <StartI2C_Trans+0xa>
	TWDR = (SLA << 1); // slave address + write bit '0'
 156:	88 0f       	add	r24, r24
 158:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT)|(1<<TWEN);  // trigger action:clear flag and enable TWI
 15c:	84 e8       	ldi	r24, 0x84	; 132
 15e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	wait_for_completion;
 162:	ec eb       	ldi	r30, 0xBC	; 188
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	88 23       	and	r24, r24
 16a:	ec f7       	brge	.-6      	; 0x166 <StartI2C_Trans+0x20>
}
 16c:	08 95       	ret

0000016e <StopI2C_Trans>:

void StopI2C_Trans() {
	// this function sends a stop condition to stop I2C transmission

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); //trigger action:  send stop condition
 16e:	84 e9       	ldi	r24, 0x94	; 148
 170:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 174:	08 95       	ret

00000176 <write>:

}
void write(unsigned char data){
	// this function loads the data passed into the I2C data register and transmits
	TWDR = data; //load data into TWDR register
 176:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT)|(1<<TWEN);  // trigger action:  clear flag and enable TWI
 17a:	84 e8       	ldi	r24, 0x84	; 132
 17c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	wait_for_completion;
 180:	ec eb       	ldi	r30, 0xBC	; 188
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	88 23       	and	r24, r24
 188:	ec f7       	brge	.-6      	; 0x184 <write+0xe>
}
 18a:	08 95       	ret

0000018c <Read_from>:
void Read_from(unsigned char SLA, unsigned char MEMADDRESS){
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	c8 2f       	mov	r28, r24
 192:	d6 2f       	mov	r29, r22
	// this function sets up reading from SLA at the SLA MEMADDRESS

	StartI2C_Trans(SLA);
 194:	d8 df       	rcall	.-80     	; 0x146 <StartI2C_Trans>
	
	write(MEMADDRESS);
 196:	8d 2f       	mov	r24, r29
 198:	ee df       	rcall	.-36     	; 0x176 <write>
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); // restart to switch to read mode
 19a:	84 ea       	ldi	r24, 0xA4	; 164
 19c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	wait_for_completion;
 1a0:	ec eb       	ldi	r30, 0xBC	; 188
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	88 23       	and	r24, r24
 1a8:	ec f7       	brge	.-6      	; 0x1a4 <Read_from+0x18>
	TWDR = (SLA << 1) | 0x01; // 7 bit address for slave plus read bit
 1aa:	cc 0f       	add	r28, r28
 1ac:	c1 60       	ori	r28, 0x01	; 1
 1ae:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1 << TWINT) | (1 << TWEN)| (1 << TWEA);// trigger with master sending ack
 1b2:	84 ec       	ldi	r24, 0xC4	; 196
 1b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	wait_for_completion;
 1b8:	ec eb       	ldi	r30, 0xBC	; 188
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	88 23       	and	r24, r24
 1c0:	ec f7       	brge	.-6      	; 0x1bc <Read_from+0x30>
	TWCR = (1<< TWINT) | (1 << TWEN);  // master can send a nack now
 1c2:	84 e8       	ldi	r24, 0x84	; 132
 1c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	wait_for_completion;
 1c8:	ec eb       	ldi	r30, 0xBC	; 188
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	88 23       	and	r24, r24
 1d0:	ec f7       	brge	.-6      	; 0x1cc <Read_from+0x40>
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); // Stop condition
 1d2:	84 e9       	ldi	r24, 0x94	; 148
 1d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	// after this function is executed the TWDR register has the data from SLA that Master wants to read
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <Read_data>:

unsigned char Read_data() // Returns the last byte  from the data register
{

	return TWDR;
 1de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
}
 1e2:	08 95       	ret

000001e4 <main>:
uint8_t Data_L = 0;
int16_t Data[3];
char buffer[5];

int main(void) {
	init_usart();
 1e4:	7b d0       	rcall	.+246    	; 0x2dc <init_usart>
	initI2C();
 1e6:	9e df       	rcall	.-196    	; 0x124 <initI2C>
	StartI2C_Trans(0x53);
 1e8:	83 e5       	ldi	r24, 0x53	; 83
 1ea:	ad df       	rcall	.-166    	; 0x146 <StartI2C_Trans>
	write(0x2D);
 1ec:	8d e2       	ldi	r24, 0x2D	; 45
	write(0x08);
 1ee:	c3 df       	rcall	.-122    	; 0x176 <write>
 1f0:	88 e0       	ldi	r24, 0x08	; 8
 1f2:	c1 df       	rcall	.-126    	; 0x176 <write>
	StopI2C_Trans();
 1f4:	bc df       	rcall	.-136    	; 0x16e <StopI2C_Trans>
 1f6:	c2 e1       	ldi	r28, 0x12	; 18
		Data_H = Read_data();
		// read x data: MSB
		Read_from(0x53, 0x33);
		Data_L = Read_data();
		// merge MSB with LSB
		Data[0] = (Data_L << 8) | Data_H;
 1f8:	d2 e0       	ldi	r29, 0x02	; 2
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	83 ed       	ldi	r24, 0xD3	; 211
 1fe:	90 e3       	ldi	r25, 0x30	; 48
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x1c>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x26>
	while (1)
	{
		_delay_ms(1000);
		
		// read x data: LSB
		Read_from(0x53, 0x32);
 20a:	00 00       	nop
 20c:	62 e3       	ldi	r22, 0x32	; 50
 20e:	83 e5       	ldi	r24, 0x53	; 83
		Data_H = Read_data();
 210:	bd df       	rcall	.-134    	; 0x18c <Read_from>
 212:	e5 df       	rcall	.-54     	; 0x1de <Read_data>
 214:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <Data_H>
		// read x data: MSB
		Read_from(0x53, 0x33);
 218:	63 e3       	ldi	r22, 0x33	; 51
 21a:	83 e5       	ldi	r24, 0x53	; 83
 21c:	b7 df       	rcall	.-146    	; 0x18c <Read_from>
 21e:	df df       	rcall	.-66     	; 0x1de <Read_data>
		Data_L = Read_data();
 220:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__data_end>
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	98 2f       	mov	r25, r24
		// merge MSB with LSB
		Data[0] = (Data_L << 8) | Data_H;
 228:	88 27       	eor	r24, r24
 22a:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <Data_H>
 22e:	82 2b       	or	r24, r18
 230:	99 83       	std	Y+1, r25	; 0x01
 232:	88 83       	st	Y, r24
		
		// read y data: LSB
		Read_from(0x53, 0x34);
 234:	64 e3       	ldi	r22, 0x34	; 52
 236:	83 e5       	ldi	r24, 0x53	; 83
 238:	a9 df       	rcall	.-174    	; 0x18c <Read_from>
 23a:	d1 df       	rcall	.-94     	; 0x1de <Read_data>
		Data_H = Read_data();
 23c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <Data_H>
 240:	65 e3       	ldi	r22, 0x35	; 53
 242:	83 e5       	ldi	r24, 0x53	; 83
		// read y data: MSB
		Read_from(0x53, 0x35);
 244:	a3 df       	rcall	.-186    	; 0x18c <Read_from>
 246:	cb df       	rcall	.-106    	; 0x1de <Read_data>
 248:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__data_end>
		Data_L = Read_data();
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	98 2f       	mov	r25, r24
		// merge MSB with LSB
		Data[1] = (Data_L << 8) | Data_H;
 250:	88 27       	eor	r24, r24
 252:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <Data_H>
 256:	82 2b       	or	r24, r18
 258:	9b 83       	std	Y+3, r25	; 0x03
 25a:	8a 83       	std	Y+2, r24	; 0x02
		
		// read z data: LSB
		Read_from(0x53, 0x36);
 25c:	66 e3       	ldi	r22, 0x36	; 54
 25e:	83 e5       	ldi	r24, 0x53	; 83
 260:	95 df       	rcall	.-214    	; 0x18c <Read_from>
 262:	bd df       	rcall	.-134    	; 0x1de <Read_data>
		Data_H = Read_data();
 264:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <Data_H>
 268:	67 e3       	ldi	r22, 0x37	; 55
 26a:	83 e5       	ldi	r24, 0x53	; 83
		// read z data: MSB
		Read_from(0x53, 0x37);
 26c:	8f df       	rcall	.-226    	; 0x18c <Read_from>
 26e:	b7 df       	rcall	.-146    	; 0x1de <Read_data>
 270:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__data_end>
		Data_L = Read_data();
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	98 2f       	mov	r25, r24
		// merge MSB with LSB
		Data[2] = (Data_L << 8) | Data_H;
 278:	88 27       	eor	r24, r24
 27a:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <Data_H>
 27e:	82 2b       	or	r24, r18
 280:	9d 83       	std	Y+5, r25	; 0x05
 282:	8c 83       	std	Y+4, r24	; 0x04
		
		
		// print the content of xyz data
		usart_sendStr2("X: ");
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	92 e0       	ldi	r25, 0x02	; 2
 288:	50 d0       	rcall	.+160    	; 0x32a <usart_sendStr2>
 28a:	4a e0       	ldi	r20, 0x0A	; 10
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 28c:	68 e1       	ldi	r22, 0x18	; 24
 28e:	72 e0       	ldi	r23, 0x02	; 2
 290:	88 81       	ld	r24, Y
 292:	99 81       	ldd	r25, Y+1	; 0x01
 294:	64 d0       	rcall	.+200    	; 0x35e <__itoa_ncheck>
		itoa(Data[0], buffer, 10);
		usart_sendStr2(buffer);
 296:	88 e1       	ldi	r24, 0x18	; 24
 298:	92 e0       	ldi	r25, 0x02	; 2
 29a:	47 d0       	rcall	.+142    	; 0x32a <usart_sendStr2>
		usart_sendChar('\n');
 29c:	8a e0       	ldi	r24, 0x0A	; 10
 29e:	3d d0       	rcall	.+122    	; 0x31a <usart_sendChar>
 2a0:	84 e0       	ldi	r24, 0x04	; 4
		
		usart_sendStr2("Y: ");
 2a2:	92 e0       	ldi	r25, 0x02	; 2
 2a4:	42 d0       	rcall	.+132    	; 0x32a <usart_sendStr2>
 2a6:	4a e0       	ldi	r20, 0x0A	; 10
 2a8:	68 e1       	ldi	r22, 0x18	; 24
 2aa:	72 e0       	ldi	r23, 0x02	; 2
 2ac:	8a 81       	ldd	r24, Y+2	; 0x02
 2ae:	9b 81       	ldd	r25, Y+3	; 0x03
 2b0:	56 d0       	rcall	.+172    	; 0x35e <__itoa_ncheck>
 2b2:	88 e1       	ldi	r24, 0x18	; 24
		itoa(Data[1], buffer, 10);
		usart_sendStr2(buffer);
 2b4:	92 e0       	ldi	r25, 0x02	; 2
 2b6:	39 d0       	rcall	.+114    	; 0x32a <usart_sendStr2>
 2b8:	8a e0       	ldi	r24, 0x0A	; 10
 2ba:	2f d0       	rcall	.+94     	; 0x31a <usart_sendChar>
		usart_sendChar('\n');
 2bc:	88 e0       	ldi	r24, 0x08	; 8
 2be:	92 e0       	ldi	r25, 0x02	; 2
 2c0:	34 d0       	rcall	.+104    	; 0x32a <usart_sendStr2>
		
		usart_sendStr2("Z: ");
 2c2:	4a e0       	ldi	r20, 0x0A	; 10
 2c4:	68 e1       	ldi	r22, 0x18	; 24
 2c6:	72 e0       	ldi	r23, 0x02	; 2
 2c8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ca:	9d 81       	ldd	r25, Y+5	; 0x05
 2cc:	48 d0       	rcall	.+144    	; 0x35e <__itoa_ncheck>
 2ce:	88 e1       	ldi	r24, 0x18	; 24
 2d0:	92 e0       	ldi	r25, 0x02	; 2
 2d2:	2b d0       	rcall	.+86     	; 0x32a <usart_sendStr2>
 2d4:	8c e0       	ldi	r24, 0x0C	; 12
 2d6:	92 e0       	ldi	r25, 0x02	; 2
		itoa(Data[2], buffer, 10);
		usart_sendStr2(buffer);
 2d8:	28 d0       	rcall	.+80     	; 0x32a <usart_sendStr2>
 2da:	8f cf       	rjmp	.-226    	; 0x1fa <main+0x16>

000002dc <init_usart>:
 2dc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
		usart_sendStr2("\n\n\n");
 2e0:	87 e6       	ldi	r24, 0x67	; 103
 2e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 2e6:	e1 ec       	ldi	r30, 0xC1	; 193
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
	while ( (temp=_string[char_index])!=0 ){
		while(!(UCSR0A&(1<<UDRE0)));   // until UDR0 is empty
		UDR0 = temp;
		++char_index;	// move to next char
	}
}
 2ea:	80 81       	ld	r24, Z
 2ec:	88 64       	ori	r24, 0x48	; 72
 2ee:	80 83       	st	Z, r24
 2f0:	e2 ec       	ldi	r30, 0xC2	; 194
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	8f 77       	andi	r24, 0x7F	; 127
 2f8:	80 83       	st	Z, r24
 2fa:	80 81       	ld	r24, Z
 2fc:	8f 7b       	andi	r24, 0xBF	; 191
 2fe:	80 83       	st	Z, r24
 300:	80 81       	ld	r24, Z
 302:	8f 7d       	andi	r24, 0xDF	; 223
 304:	80 83       	st	Z, r24
 306:	80 81       	ld	r24, Z
 308:	8f 7e       	andi	r24, 0xEF	; 239
 30a:	80 83       	st	Z, r24
 30c:	80 81       	ld	r24, Z
 30e:	87 7f       	andi	r24, 0xF7	; 247
 310:	80 83       	st	Z, r24
 312:	80 81       	ld	r24, Z
 314:	86 60       	ori	r24, 0x06	; 6
 316:	80 83       	st	Z, r24
 318:	08 95       	ret

0000031a <usart_sendChar>:
 31a:	e0 ec       	ldi	r30, 0xC0	; 192
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	90 81       	ld	r25, Z
 320:	95 ff       	sbrs	r25, 5
 322:	fd cf       	rjmp	.-6      	; 0x31e <usart_sendChar+0x4>
 324:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 328:	08 95       	ret

0000032a <usart_sendStr2>:

// use pointer pass string and send string to USART
void usart_sendStr2(char *_string) {
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	ec 01       	movw	r28, r24
	uint8_t char_index = 0;
	while ( _string[char_index] != 0 ){
 330:	28 81       	ld	r18, Y
 332:	22 23       	and	r18, r18
 334:	89 f0       	breq	.+34     	; 0x358 <usart_sendStr2+0x2e>
 336:	30 e0       	ldi	r19, 0x00	; 0
		while(!(UCSR0A & _BV(UDRE0)));  // until UDR0 is empty 
 338:	e0 ec       	ldi	r30, 0xC0	; 192
 33a:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = _string[char_index];
 33c:	46 ec       	ldi	r20, 0xC6	; 198
 33e:	50 e0       	ldi	r21, 0x00	; 0

// use pointer pass string and send string to USART
void usart_sendStr2(char *_string) {
	uint8_t char_index = 0;
	while ( _string[char_index] != 0 ){
		while(!(UCSR0A & _BV(UDRE0)));  // until UDR0 is empty 
 340:	90 81       	ld	r25, Z
 342:	95 ff       	sbrs	r25, 5
 344:	fd cf       	rjmp	.-6      	; 0x340 <usart_sendStr2+0x16>
		UDR0 = _string[char_index];
 346:	da 01       	movw	r26, r20
 348:	2c 93       	st	X, r18
		++char_index;	// move to next char
 34a:	3f 5f       	subi	r19, 0xFF	; 255
}

// use pointer pass string and send string to USART
void usart_sendStr2(char *_string) {
	uint8_t char_index = 0;
	while ( _string[char_index] != 0 ){
 34c:	de 01       	movw	r26, r28
 34e:	a3 0f       	add	r26, r19
 350:	b1 1d       	adc	r27, r1
 352:	2c 91       	ld	r18, X
 354:	21 11       	cpse	r18, r1
 356:	f4 cf       	rjmp	.-24     	; 0x340 <usart_sendStr2+0x16>
		while(!(UCSR0A & _BV(UDRE0)));  // until UDR0 is empty 
		UDR0 = _string[char_index];
		++char_index;	// move to next char
	}
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <__itoa_ncheck>:
 35e:	bb 27       	eor	r27, r27
 360:	4a 30       	cpi	r20, 0x0A	; 10
 362:	31 f4       	brne	.+12     	; 0x370 <__itoa_ncheck+0x12>
 364:	99 23       	and	r25, r25
 366:	22 f4       	brpl	.+8      	; 0x370 <__itoa_ncheck+0x12>
 368:	bd e2       	ldi	r27, 0x2D	; 45
 36a:	90 95       	com	r25
 36c:	81 95       	neg	r24
 36e:	9f 4f       	sbci	r25, 0xFF	; 255
 370:	01 c0       	rjmp	.+2      	; 0x374 <__utoa_common>

00000372 <__utoa_ncheck>:
 372:	bb 27       	eor	r27, r27

00000374 <__utoa_common>:
 374:	fb 01       	movw	r30, r22
 376:	55 27       	eor	r21, r21
 378:	aa 27       	eor	r26, r26
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	aa 1f       	adc	r26, r26
 380:	a4 17       	cp	r26, r20
 382:	10 f0       	brcs	.+4      	; 0x388 <__utoa_common+0x14>
 384:	a4 1b       	sub	r26, r20
 386:	83 95       	inc	r24
 388:	50 51       	subi	r21, 0x10	; 16
 38a:	b9 f7       	brne	.-18     	; 0x37a <__utoa_common+0x6>
 38c:	a0 5d       	subi	r26, 0xD0	; 208
 38e:	aa 33       	cpi	r26, 0x3A	; 58
 390:	08 f0       	brcs	.+2      	; 0x394 <__utoa_common+0x20>
 392:	a9 5d       	subi	r26, 0xD9	; 217
 394:	a1 93       	st	Z+, r26
 396:	00 97       	sbiw	r24, 0x00	; 0
 398:	79 f7       	brne	.-34     	; 0x378 <__utoa_common+0x4>
 39a:	b1 11       	cpse	r27, r1
 39c:	b1 93       	st	Z+, r27
 39e:	11 92       	st	Z+, r1
 3a0:	cb 01       	movw	r24, r22
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <strrev>

000003a4 <strrev>:
 3a4:	dc 01       	movw	r26, r24
 3a6:	fc 01       	movw	r30, r24
 3a8:	67 2f       	mov	r22, r23
 3aa:	71 91       	ld	r23, Z+
 3ac:	77 23       	and	r23, r23
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <strrev+0x4>
 3b0:	32 97       	sbiw	r30, 0x02	; 2
 3b2:	04 c0       	rjmp	.+8      	; 0x3bc <strrev+0x18>
 3b4:	7c 91       	ld	r23, X
 3b6:	6d 93       	st	X+, r22
 3b8:	70 83       	st	Z, r23
 3ba:	62 91       	ld	r22, -Z
 3bc:	ae 17       	cp	r26, r30
 3be:	bf 07       	cpc	r27, r31
 3c0:	c8 f3       	brcs	.-14     	; 0x3b4 <strrev+0x10>
 3c2:	08 95       	ret

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
