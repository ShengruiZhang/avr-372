
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000002b4  00000328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001195  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d42  00000000  00000000  000015d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b0  00000000  00000000  00002317  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  000028c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000603  00000000  00000000  000029e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a9  00000000  00000000  00002fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00003290  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 eb       	ldi	r30, 0xB4	; 180
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	98 d0       	rcall	.+304    	; 0x240 <main>
 110:	cf c0       	rjmp	.+414    	; 0x2b0 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <initLCDPins>:

/*
 * Initializes all pins related to the LCD to be outputs
 */
void initLCDPins(){ // initial LCD pins
  DDRA |= (1<<DDA0|1<<DDA1|1<<DDA2|1<<DDA3);
 114:	81 b1       	in	r24, 0x01	; 1
 116:	8f 60       	ori	r24, 0x0F	; 15
 118:	81 b9       	out	0x01, r24	; 1
  DDRE |= (1<<DDB4|1<<DDB5); //B6=RS
 11a:	8d b1       	in	r24, 0x0d	; 13
 11c:	80 63       	ori	r24, 0x30	; 48
 11e:	8d b9       	out	0x0d, r24	; 13
 120:	08 95       	ret

00000122 <fourBitCommandWithDelay>:
 *         PORTA
 *  2. This is a "command" signal, meaning RS should be Low
 *  3. Assert high on enable pin, delay, and asset low on enable pin
 *  4. delay the provided number in MICROseconds.
 */
void fourBitCommandWithDelay(unsigned char data, unsigned int delay){
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	eb 01       	movw	r28, r22
  PORTA = (data & 0x0F); // send command to LCD
 128:	8f 70       	andi	r24, 0x0F	; 15
 12a:	82 b9       	out	0x02, r24	; 2
  PORTE &= ~(1<<PE5); // set RS(B6) to Low
 12c:	75 98       	cbi	0x0e, 5	; 14
  PORTE |= (1<<PE4); // set EN(B4) to High
 12e:	74 9a       	sbi	0x0e, 4	; 14
  delayUs(1); // after 1ms, need to set EN(B4) to Low
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	a5 d0       	rcall	.+330    	; 0x280 <delayUs>
  PORTE &= ~(1<<PE4); // set EN(B4) to Low
 136:	74 98       	cbi	0x0e, 4	; 14
  delayUs(delay);
 138:	ce 01       	movw	r24, r28
 13a:	a2 d0       	rcall	.+324    	; 0x280 <delayUs>
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <eightBitCommandWithDelay>:
 * 3. Assert high on enable pin, delay, and asset low on enable pin
 * 4. Now set the lower four bits of command to appropriate bits in PORTA
 * 5. Assert high on enable pin, delay, and asset low on enable pin
 * 6. delay the provided number in MICROseconds.
 */
void eightBitCommandWithDelay(unsigned char command, unsigned int delay){
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
 14a:	8b 01       	movw	r16, r22
  PORTA = (command >> 4); // switch the sequence of the 1st 4bits and 2nd 4bits
 14c:	82 95       	swap	r24
 14e:	8f 70       	andi	r24, 0x0F	; 15
 150:	82 b9       	out	0x02, r24	; 2
                           // Ex: original command = 1100-1011; shifted command = 1011-1100
  PORTE &= ~(1<<PE5); // set RS(B6) to Low
 152:	75 98       	cbi	0x0e, 5	; 14
  PORTE |= (1<<PE4); // set EN(B4) to High
 154:	74 9a       	sbi	0x0e, 4	; 14
  delayUs(1); // after 1ms, need to set EN(B4) to Low
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	92 d0       	rcall	.+292    	; 0x280 <delayUs>
  PORTE &= ~(1<<PE4); // set EN(B4) to Low
 15c:	74 98       	cbi	0x0e, 4	; 14
  delayUs(1);
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	8e d0       	rcall	.+284    	; 0x280 <delayUs>
  PORTA = (command & 0x0F); // send command to LCD
 164:	cf 70       	andi	r28, 0x0F	; 15
 166:	c2 b9       	out	0x02, r28	; 2
  PORTE |= (1<<PE4); // set EN(B4) to High
 168:	74 9a       	sbi	0x0e, 4	; 14
  delayUs(1); // after 1ms, need to set EN(B4) to Low
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	88 d0       	rcall	.+272    	; 0x280 <delayUs>
  PORTE &= ~(1<<PE4); // set EN(B4) to Low
 170:	74 98       	cbi	0x0e, 4	; 14
  delayUs(delay);
 172:	c8 01       	movw	r24, r16
 174:	85 d0       	rcall	.+266    	; 0x280 <delayUs>
 176:	cf 91       	pop	r28
}
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	08 95       	ret

0000017e <writeCharacter>:
 17e:	cf 93       	push	r28
 * 3. Assert high on enable pin, delay, and asset low on enable pin
 * 4. Now set the lower four bits of character to appropriate bits in PORTA
 * 5. Assert high on enable pin, delay, and asset low on enable pin
 * 6. delay is always 46 MICROseconds for a character write
 */
void writeCharacter(unsigned char character){
 180:	c8 2f       	mov	r28, r24
  PORTA = (character >> 4); // switch the sequence of the 1st 4bits and 2nd 4bits
 182:	82 95       	swap	r24
 184:	8f 70       	andi	r24, 0x0F	; 15
 186:	82 b9       	out	0x02, r24	; 2
                           // Ex: original command = 1100-1011; shifted command = 1011-1100
  //PORTA = 0b
  PORTE |= (1<<PE5); // set RS(B6) to Low
 188:	75 9a       	sbi	0x0e, 5	; 14
  PORTE |= (1<<PE4); // set EN(B4) to High
 18a:	74 9a       	sbi	0x0e, 4	; 14
  delayUs(1); // after 1ms, need to set EN(B4) to Low
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	77 d0       	rcall	.+238    	; 0x280 <delayUs>
  PORTE &= ~(1<<PE4); // set EN(B4) to Low
 192:	74 98       	cbi	0x0e, 4	; 14
  delayUs(1);
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	73 d0       	rcall	.+230    	; 0x280 <delayUs>
  PORTA = (character & 0x0F); // send character to LCD
 19a:	cf 70       	andi	r28, 0x0F	; 15
 19c:	c2 b9       	out	0x02, r28	; 2
  PORTE |= (1<<PE5); 
 19e:	75 9a       	sbi	0x0e, 5	; 14
  PORTE |= (1<<PE4); // set EN(B4) to High
 1a0:	74 9a       	sbi	0x0e, 4	; 14
  delayUs(1); // after 1ms, need to set EN(B4) to Low
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	6c d0       	rcall	.+216    	; 0x280 <delayUs>
  PORTE &= ~(1<<PE4); // set EN(B4) to Low
  delayUs(46);
 1a8:	74 98       	cbi	0x0e, 4	; 14
 1aa:	8e e2       	ldi	r24, 0x2E	; 46
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	68 d0       	rcall	.+208    	; 0x280 <delayUs>
}
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <writeString>:
/*
 * Writes a provided string such as "Hello!" to the LCD screen. You should
 * remember that a c string always ends with the '\0' character and
 * that this should just call writeCharacter multiple times.
 */
void writeString(const char *string){
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	ec 01       	movw	r28, r24
  while(*string != '\0'){
 1ba:	88 81       	ld	r24, Y
 1bc:	88 23       	and	r24, r24
 1be:	29 f0       	breq	.+10     	; 0x1ca <writeString+0x16>
 1c0:	21 96       	adiw	r28, 0x01	; 1
    writeCharacter(*string);
 1c2:	dd df       	rcall	.-70     	; 0x17e <writeCharacter>
 * Writes a provided string such as "Hello!" to the LCD screen. You should
 * remember that a c string always ends with the '\0' character and
 * that this should just call writeCharacter multiple times.
 */
void writeString(const char *string){
  while(*string != '\0'){
 1c4:	89 91       	ld	r24, Y+
 1c6:	81 11       	cpse	r24, r1
 1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <writeString+0xe>
    writeCharacter(*string);
    string++;
  }
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <moveCursor>:
 */
void moveCursor(unsigned char x, unsigned char y){
	unsigned char location;
    location = 0x80;
    location |= ((x << 6) & 0xF0) |(y & 0x0F);
    eightBitCommandWithDelay(location,53);
 1d0:	96 2f       	mov	r25, r22
 1d2:	9f 70       	andi	r25, 0x0F	; 15
 1d4:	90 68       	ori	r25, 0x80	; 128
 1d6:	40 e4       	ldi	r20, 0x40	; 64
 1d8:	84 9f       	mul	r24, r20
 1da:	90 01       	movw	r18, r0
 1dc:	11 24       	eor	r1, r1
 1de:	65 e3       	ldi	r22, 0x35	; 53
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	89 2f       	mov	r24, r25
 1e4:	82 2b       	or	r24, r18
 1e6:	ad cf       	rjmp	.-166    	; 0x142 <eightBitCommandWithDelay>
 1e8:	08 95       	ret

000001ea <initLCDProcedure>:
 * This should be the last function you write as it largely depends on all other
 * functions working.
 */
void initLCDProcedure(){
  // Delay 15 milliseconds
  delayUs(15000);
 1ea:	88 e9       	ldi	r24, 0x98	; 152
 1ec:	9a e3       	ldi	r25, 0x3A	; 58
 1ee:	48 d0       	rcall	.+144    	; 0x280 <delayUs>
  // Write 0b0011 to DB[7:4] and delay 4100 microseconds
  fourBitCommandWithDelay(0x03,4100);
 1f0:	64 e0       	ldi	r22, 0x04	; 4
 1f2:	70 e1       	ldi	r23, 0x10	; 16
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	95 df       	rcall	.-214    	; 0x122 <fourBitCommandWithDelay>
  // Write 0b0011 to DB[7:4] and delay 100 microseconds
  fourBitCommandWithDelay(0x03,100);
 1f8:	64 e6       	ldi	r22, 0x64	; 100
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	91 df       	rcall	.-222    	; 0x122 <fourBitCommandWithDelay>
  // The data sheet does not make this clear, but at this point you are issuing
  // commands in two sets of four bits. You must delay after each command
  // (which is the second set of four bits) an amount specified on page 3 of
  // the data sheet.
  // write 0b0011 to DB[7:4] and 100us delay
  fourBitCommandWithDelay(0x03, 100);
 200:	64 e6       	ldi	r22, 0x64	; 100
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	8d df       	rcall	.-230    	; 0x122 <fourBitCommandWithDelay>
  // write 0b0010 to DB[7:4] and 100us delay.
  fourBitCommandWithDelay(0x02,100);
 208:	64 e6       	ldi	r22, 0x64	; 100
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	89 df       	rcall	.-238    	; 0x122 <fourBitCommandWithDelay>
  // Function set in the command table with 53us delay
  eightBitCommandWithDelay(0x28, 53);//0010 1000
 210:	65 e3       	ldi	r22, 0x35	; 53
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	88 e2       	ldi	r24, 0x28	; 40
 216:	95 df       	rcall	.-214    	; 0x142 <eightBitCommandWithDelay>
  // Display off in the command table with 53us delay
  eightBitCommandWithDelay(0x08, 53); //00001000
 218:	65 e3       	ldi	r22, 0x35	; 53
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	88 e0       	ldi	r24, 0x08	; 8
 21e:	91 df       	rcall	.-222    	; 0x142 <eightBitCommandWithDelay>
  // Clear display in the command table. Remember the delay is longer!!!
  eightBitCommandWithDelay(0x01, 3000); //0000 0001
 220:	68 eb       	ldi	r22, 0xB8	; 184
 222:	7b e0       	ldi	r23, 0x0B	; 11
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	8d df       	rcall	.-230    	; 0x142 <eightBitCommandWithDelay>
  // Entry Mode Set in the command table.
  eightBitCommandWithDelay(0x06, 53); //0000 0110
 228:	65 e3       	ldi	r22, 0x35	; 53
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	89 df       	rcall	.-238    	; 0x142 <eightBitCommandWithDelay>
 230:	65 e3       	ldi	r22, 0x35	; 53
  // Display ON/OFF Control in the command table. (Yes, this is not specified),
  // in the data sheet, but you have to do it to get this to work. Yay datasheets!)
  eightBitCommandWithDelay(0b00001101, 53); //00001111
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	8d e0       	ldi	r24, 0x0D	; 13
 236:	85 cf       	rjmp	.-246    	; 0x142 <eightBitCommandWithDelay>
 238:	08 95       	ret

0000023a <initLCD>:
 23a:	6c df       	rcall	.-296    	; 0x114 <initLCDPins>
 23c:	d6 cf       	rjmp	.-84     	; 0x1ea <initLCDProcedure>
* This function is made so that it's possible to test initLCDPins separately
* from initLCDProcedure which will likely be necessary.
*/
void initLCD(){ // initial LCD screen
  initLCDPins();
  initLCDProcedure();
 23e:	08 95       	ret

00000240 <main>:
 240:	08 d0       	rcall	.+16     	; 0x252 <initTimer1>

int main(){

  // Initialize timer, LCD, and write Hello!
  initTimer1();
  initLCD();
 242:	fb df       	rcall	.-10     	; 0x23a <initLCD>
 244:	64 e0       	ldi	r22, 0x04	; 4
  moveCursor(0, 4);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	c3 df       	rcall	.-122    	; 0x1d0 <moveCursor>
 24a:	80 e0       	ldi	r24, 0x00	; 0
  writeString("Fucked");
 24c:	92 e0       	ldi	r25, 0x02	; 2
 24e:	b2 df       	rcall	.-156    	; 0x1b4 <writeString>
 250:	ff cf       	rjmp	.-2      	; 0x250 <main+0x10>

00000252 <initTimer1>:
 252:	e0 e8       	ldi	r30, 0x80	; 128
 254:	f0 e0       	ldi	r31, 0x00	; 0

#include "timer.h"

/* Initialize timer 1, you should not turn the timer on here. Use CTC mode  .*/
void initTimer1(){
    TCCR1A &= ~(1 << WGM10);  // set CTC MODE
 256:	80 81       	ld	r24, Z
 258:	8e 7f       	andi	r24, 0xFE	; 254
 25a:	80 83       	st	Z, r24
    TCCR1A |= (1 << WGM11);
 25c:	80 81       	ld	r24, Z
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	80 83       	st	Z, r24
    TCCR1B &= ~(1<<WGM12); 
 262:	e1 e8       	ldi	r30, 0x81	; 129
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	87 7f       	andi	r24, 0xF7	; 247
 26a:	80 83       	st	Z, r24
    TCCR1B |=(1<<CS10); // SET prescale to 64
 26c:	80 81       	ld	r24, Z
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	80 83       	st	Z, r24
    OCR1A = 16;
 272:	80 e1       	ldi	r24, 0x10	; 16
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 27a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 27e:	08 95       	ret

00000280 <delayUs>:

/* This delays the program an amount specified by unsigned int delay.
*/
void delayUs(unsigned int delay){
   unsigned int delayCnt = 0;
    TIFR1 |= (1<<OCF1A); // flag down
 280:	b1 9a       	sbi	0x16, 1	; 22
    TCNT1 = 0;
 282:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 286:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
}

/* This delays the program an amount specified by unsigned int delay.
*/
void delayUs(unsigned int delay){
   unsigned int delayCnt = 0;
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	30 e0       	ldi	r19, 0x00	; 0
    TIFR1 |= (1<<OCF1A); // flag down
    TCNT1 = 0;
    while(delayCnt<delay){
 28e:	09 c0       	rjmp	.+18     	; 0x2a2 <delayUs+0x22>
        if(TIFR1&(1<<OCF1A)){
 290:	b1 99       	sbic	0x16, 1	; 22
 292:	04 c0       	rjmp	.+8      	; 0x29c <delayUs+0x1c>
*/
void delayUs(unsigned int delay){
   unsigned int delayCnt = 0;
    TIFR1 |= (1<<OCF1A); // flag down
    TCNT1 = 0;
    while(delayCnt<delay){
 294:	28 17       	cp	r18, r24
 296:	39 07       	cpc	r19, r25
 298:	d8 f3       	brcs	.-10     	; 0x290 <delayUs+0x10>
 29a:	08 95       	ret
        if(TIFR1&(1<<OCF1A)){
            delayCnt++;
 29c:	2f 5f       	subi	r18, 0xFF	; 255
 29e:	3f 4f       	sbci	r19, 0xFF	; 255
            TIFR1 |=(1<<OCF1A);
 2a0:	b1 9a       	sbi	0x16, 1	; 22
*/
void delayUs(unsigned int delay){
   unsigned int delayCnt = 0;
    TIFR1 |= (1<<OCF1A); // flag down
    TCNT1 = 0;
    while(delayCnt<delay){
 2a2:	82 17       	cp	r24, r18
 2a4:	93 07       	cpc	r25, r19
 2a6:	19 f0       	breq	.+6      	; 0x2ae <delayUs+0x2e>
        if(TIFR1&(1<<OCF1A)){
 2a8:	b1 9b       	sbis	0x16, 1	; 22
 2aa:	f2 cf       	rjmp	.-28     	; 0x290 <delayUs+0x10>
 2ac:	f7 cf       	rjmp	.-18     	; 0x29c <delayUs+0x1c>
 2ae:	08 95       	ret

000002b0 <_exit>:
 2b0:	f8 94       	cli

000002b2 <__stop_program>:
 2b2:	ff cf       	rjmp	.-2      	; 0x2b2 <__stop_program>
