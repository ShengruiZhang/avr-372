
LiquidCrystalDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000002c2  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015b9  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dd5  00000000  00000000  000019f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006fd  00000000  00000000  000027c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00002ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000682  00000000  00000000  00002fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007d5  00000000  00000000  0000362a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00003dff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ec       	ldi	r30, 0xC2	; 194
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	ba d0       	rcall	.+372    	; 0x284 <main>
 110:	d6 c0       	rjmp	.+428    	; 0x2be <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <LCD_init_Pins>:
}

void LCD_init_Pins() {
	
	// LCD: D4 ~ D7 -> PA0 ~ PA3 -> Arduino Pin 22 ~ 25
	DDRA |= _BV(PA0) | _BV(PA1) | _BV(PA2) | _BV(PA3);
 114:	81 b1       	in	r24, 0x01	; 1
 116:	8f 60       	ori	r24, 0x0F	; 15
 118:	81 b9       	out	0x01, r24	; 1
	
	// LCD: RS -> PE4 -> 3
	// LCD: EN -> PE5 -> 2
	DDRE |= _BV(LCD_RS) | _BV(LCD_EN);
 11a:	8d b1       	in	r24, 0x0d	; 13
 11c:	80 63       	ori	r24, 0x30	; 48
 11e:	8d b9       	out	0x0d, r24	; 13
 120:	08 95       	ret

00000122 <LCD_writeCharacter>:
	_delay_us(53);
}

void LCD_writeCharacter(uchar _raw_char) {
	// Send upper 4 bits
	PORTA = _raw_char >> 4;
 122:	98 2f       	mov	r25, r24
 124:	92 95       	swap	r25
 126:	9f 70       	andi	r25, 0x0F	; 15
 128:	92 b9       	out	0x02, r25	; 2
	// RS high, EN high
	PORTE|=_BV(LCD_RS);
 12a:	75 9a       	sbi	0x0e, 5	; 14
	PORTE|=_BV(LCD_EN);
 12c:	74 9a       	sbi	0x0e, 4	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	95 e0       	ldi	r25, 0x05	; 5
 130:	9a 95       	dec	r25
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_writeCharacter+0xe>
 134:	00 00       	nop
	// Delay 1 us
	_delay_us(1);
	// EN low
	PORTE&=~(_BV(LCD_EN));
 136:	74 98       	cbi	0x0e, 4	; 14
 138:	95 e0       	ldi	r25, 0x05	; 5
 13a:	9a 95       	dec	r25
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_writeCharacter+0x18>
 13e:	00 00       	nop
	_delay_us(1);
	
	
	// Send lower 4 bits
	PORTA = _raw_char & 0x0F;
 140:	8f 70       	andi	r24, 0x0F	; 15
 142:	82 b9       	out	0x02, r24	; 2
	// RS high, EN high
	PORTE|=_BV(LCD_RS);
 144:	75 9a       	sbi	0x0e, 5	; 14
	PORTE|=_BV(LCD_EN);
 146:	74 9a       	sbi	0x0e, 4	; 14
 148:	85 e0       	ldi	r24, 0x05	; 5
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_writeCharacter+0x28>
 14e:	00 00       	nop
	// Delay 1 us
	_delay_us(1);
	// EN low
	PORTE&=~(_BV(LCD_EN));
 150:	74 98       	cbi	0x0e, 4	; 14
 152:	95 ef       	ldi	r25, 0xF5	; 245
 154:	9a 95       	dec	r25
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_writeCharacter+0x32>
 158:	00 00       	nop
 15a:	08 95       	ret

0000015c <LCD_writeString>:
	_delay_us(46);
	
}

void LCD_writeString(const char *_string) {
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	ec 01       	movw	r28, r24
	while (*_string != '\0')
 162:	88 81       	ld	r24, Y
 164:	88 23       	and	r24, r24
 166:	29 f0       	breq	.+10     	; 0x172 <LCD_writeString+0x16>
 168:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_writeCharacter(*_string);
 16a:	db df       	rcall	.-74     	; 0x122 <LCD_writeCharacter>
	_delay_us(46);
	
}

void LCD_writeString(const char *_string) {
	while (*_string != '\0')
 16c:	89 91       	ld	r24, Y+
 16e:	81 11       	cpse	r24, r1
 170:	fc cf       	rjmp	.-8      	; 0x16a <LCD_writeString+0xe>
	{
		LCD_writeCharacter(*_string);
		++_string;
	}
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <_LCD_write_4bit>:

// Low level commands
void _LCD_write_4bit(uchar _data_raw) {
	// Only preserve the lower 4 bit of data
	PORTA = _data_raw & 0x0F;
 178:	8f 70       	andi	r24, 0x0F	; 15
 17a:	82 b9       	out	0x02, r24	; 2
	
	// Pull RS low
	PORTE&=~(_BV(LCD_RS));
 17c:	75 98       	cbi	0x0e, 5	; 14
	// EN high
	PORTE|=_BV(LCD_EN);
 17e:	74 9a       	sbi	0x0e, 4	; 14
 180:	85 e0       	ldi	r24, 0x05	; 5
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <_LCD_write_4bit+0xa>
 186:	00 00       	nop
	_delay_us(1);
	// EN low
	PORTE&=~(_BV(LCD_EN));
 188:	74 98       	cbi	0x0e, 4	; 14
 18a:	08 95       	ret

0000018c <_LCD_write_8bit>:
}

void _LCD_write_8bit(uchar _data_raw) {
	// Send upper 4 bits first
	PORTA = _data_raw >> 4;
 18c:	98 2f       	mov	r25, r24
 18e:	92 95       	swap	r25
 190:	9f 70       	andi	r25, 0x0F	; 15
 192:	92 b9       	out	0x02, r25	; 2
	
	// Pull RS to low
	PORTE&=~(_BV(LCD_RS));
 194:	75 98       	cbi	0x0e, 5	; 14
	// Set EN to high
	PORTE|=_BV(LCD_EN);
 196:	74 9a       	sbi	0x0e, 4	; 14
 198:	95 e0       	ldi	r25, 0x05	; 5
 19a:	9a 95       	dec	r25
 19c:	f1 f7       	brne	.-4      	; 0x19a <_LCD_write_8bit+0xe>
 19e:	00 00       	nop
	// Delay 1 ms, and pull EN low
	_delay_us(1);
	PORTE&=~(_BV(LCD_EN));
 1a0:	74 98       	cbi	0x0e, 4	; 14
 1a2:	95 e0       	ldi	r25, 0x05	; 5
 1a4:	9a 95       	dec	r25
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <_LCD_write_8bit+0x18>
 1a8:	00 00       	nop
	_delay_us(1);
	
	// Send lower 4 bits
	PORTA = _data_raw & 0x0F;
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	82 b9       	out	0x02, r24	; 2
	// Set EN to high
	PORTE|=_BV(LCD_EN);
 1ae:	74 9a       	sbi	0x0e, 4	; 14
 1b0:	85 e0       	ldi	r24, 0x05	; 5
 1b2:	8a 95       	dec	r24
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <_LCD_write_8bit+0x26>
 1b6:	00 00       	nop
	// Delay 1 ms
	_delay_us(1);
	// Pull EN low
	PORTE&=~(_BV(LCD_EN));
 1b8:	74 98       	cbi	0x0e, 4	; 14
 1ba:	08 95       	ret

000001bc <LCD_init_Main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	80 e7       	ldi	r24, 0x70	; 112
 1c0:	92 e0       	ldi	r25, 0x02	; 2
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <LCD_init_Main+0x6>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <LCD_init_Main+0x10>
 1cc:	00 00       	nop
	
	// Set RS and EN low to begin commands
	//LCD_RS_set_LOW;
	//LCD_EN_set_LOW;
	
	_LCD_write_4bit(0x03);
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	d3 df       	rcall	.-90     	; 0x178 <_LCD_write_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	8f e0       	ldi	r24, 0x0F	; 15
 1d4:	90 e4       	ldi	r25, 0x40	; 64
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCD_init_Main+0x1a>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCD_init_Main+0x20>
 1dc:	00 00       	nop
	_delay_us(4100);
	
	_LCD_write_4bit(0x03);
 1de:	83 e0       	ldi	r24, 0x03	; 3
 1e0:	cb df       	rcall	.-106    	; 0x178 <_LCD_write_4bit>
 1e2:	8f e8       	ldi	r24, 0x8F	; 143
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCD_init_Main+0x2a>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCD_init_Main+0x30>
	_delay_us(100);
	
	_LCD_write_4bit(0x03);
 1ec:	00 00       	nop
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	c3 df       	rcall	.-122    	; 0x178 <_LCD_write_4bit>
 1f2:	8f e8       	ldi	r24, 0x8F	; 143
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <LCD_init_Main+0x3a>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <LCD_init_Main+0x40>
	_delay_us(100);
	
	_LCD_write_4bit(0x02);
 1fc:	00 00       	nop
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	bb df       	rcall	.-138    	; 0x178 <_LCD_write_4bit>
 202:	8f e8       	ldi	r24, 0x8F	; 143
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <LCD_init_Main+0x4a>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <LCD_init_Main+0x50>
	_delay_us(100);


	///////////////////////////////
	_LCD_write_8bit(0x28);
 20c:	00 00       	nop
 20e:	88 e2       	ldi	r24, 0x28	; 40
 210:	bd df       	rcall	.-134    	; 0x18c <_LCD_write_8bit>
 212:	83 ed       	ldi	r24, 0xD3	; 211
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_init_Main+0x5a>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_init_Main+0x60>
	_delay_us(53);
	
	_LCD_write_8bit(0x08);
 21c:	00 00       	nop
 21e:	88 e0       	ldi	r24, 0x08	; 8
 220:	b5 df       	rcall	.-150    	; 0x18c <_LCD_write_8bit>
 222:	83 ed       	ldi	r24, 0xD3	; 211
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <LCD_init_Main+0x6a>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <LCD_init_Main+0x70>
	_delay_us(53);

	_LCD_write_8bit(0x01);
 22c:	00 00       	nop
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	ad df       	rcall	.-166    	; 0x18c <_LCD_write_8bit>
 232:	8f ed       	ldi	r24, 0xDF	; 223
 234:	9e e2       	ldi	r25, 0x2E	; 46
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_init_Main+0x7a>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_init_Main+0x80>
	_delay_us(3000);

	_LCD_write_8bit(0x06);
 23c:	00 00       	nop
 23e:	86 e0       	ldi	r24, 0x06	; 6
 240:	a5 df       	rcall	.-182    	; 0x18c <_LCD_write_8bit>
 242:	8f ed       	ldi	r24, 0xDF	; 223
 244:	9e e2       	ldi	r25, 0x2E	; 46
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LCD_init_Main+0x8a>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCD_init_Main+0x90>
	_delay_us(3000);

	_LCD_write_8bit(0b00001101);
 24c:	00 00       	nop
 24e:	8d e0       	ldi	r24, 0x0D	; 13
 250:	9d df       	rcall	.-198    	; 0x18c <_LCD_write_8bit>
 252:	83 ed       	ldi	r24, 0xD3	; 211
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <LCD_init_Main+0x9a>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <LCD_init_Main+0xa0>
 25c:	00 00       	nop
 25e:	08 95       	ret

00000260 <LCD_init>:
#include "LiquidCrystal.h"
#include "timer.h"

// LED initialization
void LCD_init() {
	LCD_init_Pins();
 260:	59 df       	rcall	.-334    	; 0x114 <LCD_init_Pins>
	LCD_init_Main();
 262:	ac cf       	rjmp	.-168    	; 0x1bc <LCD_init_Main>
 264:	08 95       	ret

00000266 <LCD_moveCursor>:
 266:	6f 70       	andi	r22, 0x0F	; 15

// High level commands
void LCD_moveCursor(uchar _dest_x, uchar _dest_y) {
	uchar mask = 0x80;
	mask |= ( (_dest_x << 6) & 0xF0) | (_dest_y & 0x0F);
	_LCD_write_8bit(mask);
 268:	60 68       	ori	r22, 0x80	; 128
 26a:	20 e4       	ldi	r18, 0x40	; 64
 26c:	82 9f       	mul	r24, r18
 26e:	c0 01       	movw	r24, r0
 270:	11 24       	eor	r1, r1
 272:	86 2b       	or	r24, r22
 274:	8b df       	rcall	.-234    	; 0x18c <_LCD_write_8bit>
 276:	83 ed       	ldi	r24, 0xD3	; 211
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <LCD_moveCursor+0x14>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <LCD_moveCursor+0x1a>
 280:	00 00       	nop
 282:	08 95       	ret

00000284 <main>:

typedef unsigned int uint;

int main(void)
{	
	DDRB |= _BV(DDB7);
 284:	27 9a       	sbi	0x04, 7	; 4
	
	LCD_init();
 286:	ec df       	rcall	.-40     	; 0x260 <LCD_init>
	LCD_moveCursor(0, 4);
 288:	64 e0       	ldi	r22, 0x04	; 4
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	ec df       	rcall	.-40     	; 0x266 <LCD_moveCursor>
	LCD_writeString("COVID19");
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	92 e0       	ldi	r25, 0x02	; 2
 292:	64 df       	rcall	.-312    	; 0x15c <LCD_writeString>
	
    while (1) 
    {
		PORTB |= _BV(PB7);
 294:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	2f ef       	ldi	r18, 0xFF	; 255
 298:	89 e6       	ldi	r24, 0x69	; 105
 29a:	98 e1       	ldi	r25, 0x18	; 24
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	80 40       	sbci	r24, 0x00	; 0
 2a0:	90 40       	sbci	r25, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0x18>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0x22>
 2a6:	00 00       	nop
		_delay_ms(500);
		PORTB &= ~(_BV(PB7));
 2a8:	2f 98       	cbi	0x05, 7	; 5
 2aa:	2f ef       	ldi	r18, 0xFF	; 255
 2ac:	89 e6       	ldi	r24, 0x69	; 105
 2ae:	98 e1       	ldi	r25, 0x18	; 24
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <main+0x2c>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0x36>
 2ba:	00 00       	nop
 2bc:	eb cf       	rjmp	.-42     	; 0x294 <main+0x10>

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
