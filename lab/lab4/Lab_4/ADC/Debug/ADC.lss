
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000704  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000690  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  00000704  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000734  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010cd  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d84  00000000  00000000  000018f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007bc  00000000  00000000  0000267d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00002e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c9  00000000  00000000  00002f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000216  00000000  00000000  0000364d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003863  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	9a c0       	rjmp	.+308    	; 0x1aa <__vector_29>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	38 d0       	rcall	.+112    	; 0x176 <main>
 106:	c2 c2       	rjmp	.+1412   	; 0x68c <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <ADC_Start>:
	
	ADC_Start();
}

void ADC_Start() {
	ADCSRA |= _BV(ADSC);
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24
 114:	08 95       	ret

00000116 <init_ADC_0>:
#include "adc.h"

void init_ADC_0() {
	
	// Set ADC reference voltage same as AVcc
	ADMUX |= _BV(REFS0);
 116:	ec e7       	ldi	r30, 0x7C	; 124
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	80 83       	st	Z, r24
	
	// Set ADC5 active -> 000101
	//ADMUX |= _BV(MUX2) | _BV(MUX0);
	
	// Set ADC0 active -> 000000
	ADMUX &= ~_BV(MUX0);
 120:	80 81       	ld	r24, Z
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	80 83       	st	Z, r24
	ADMUX &= ~_BV(MUX1);
 126:	80 81       	ld	r24, Z
 128:	8d 7f       	andi	r24, 0xFD	; 253
 12a:	80 83       	st	Z, r24
	ADMUX &= ~_BV(MUX2);
 12c:	80 81       	ld	r24, Z
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	80 83       	st	Z, r24
	ADMUX &= ~_BV(MUX3);
 132:	80 81       	ld	r24, Z
 134:	87 7f       	andi	r24, 0xF7	; 247
 136:	80 83       	st	Z, r24
	ADMUX &= ~_BV(MUX4);
 138:	80 81       	ld	r24, Z
 13a:	8f 7e       	andi	r24, 0xEF	; 239
 13c:	80 83       	st	Z, r24
	ADCSRB &= ~_BV(MUX5);
 13e:	eb e7       	ldi	r30, 0x7B	; 123
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	87 7f       	andi	r24, 0xF7	; 247
 146:	80 83       	st	Z, r24
	
	// Enable ADC
	ADCSRA |= _BV(ADEN);
 148:	ea e7       	ldi	r30, 0x7A	; 122
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 68       	ori	r24, 0x80	; 128
 150:	80 83       	st	Z, r24
	
	// Generate an interrupt when 1 conversion done
	ADCSRA |= _BV(ADIE);
 152:	80 81       	ld	r24, Z
 154:	88 60       	ori	r24, 0x08	; 8
 156:	80 83       	st	Z, r24
	
	// 128 prescaler -> 8 us clock
	ADCSRA |= _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2);
 158:	80 81       	ld	r24, Z
 15a:	87 60       	ori	r24, 0x07	; 7
 15c:	80 83       	st	Z, r24
	
	// Disable digital buffer
	DIDR0 |= _BV(ADC0D);
 15e:	ee e7       	ldi	r30, 0x7E	; 126
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	81 60       	ori	r24, 0x01	; 1
 166:	80 83       	st	Z, r24
	
	ADC_Start();
 168:	d0 cf       	rjmp	.-96     	; 0x10a <ADC_Start>
 16a:	08 95       	ret

0000016c <init_button>:
#include "button.h"

void init_button() {
	// Dedicated button indicator on Arduino Pin 18
	// PD3
	DDRD |= _BV(DDD3);
 16c:	53 9a       	sbi	0x0a, 3	; 10
	PORTD |= _BV(PD3);
 16e:	5b 9a       	sbi	0x0b, 3	; 11
	
	// Arduino Pin 19 as button input
	// PD2 / INT2
	DDRD &= ~_BV(DDD2);
 170:	52 98       	cbi	0x0a, 2	; 10
	
	// Enable pull-up
	PORTD |= _BV(PD2);
 172:	5a 9a       	sbi	0x0b, 2	; 11
 174:	08 95       	ret

00000176 <main>:
volatile enum Button_State Button_PD2 = _State_Button_released;

int main(void)
{
	// On-board LED
	DDRB |= _BV(DDB7);
 176:	27 9a       	sbi	0x04, 7	; 4
	
	// ADC input pin
	DDRF &= ~_BV(PF0);
 178:	80 98       	cbi	0x10, 0	; 16
	
	// Timer PWM waveform gen. pins
	DDRB |= _BV(DDB5) | _BV(DDB6);
 17a:	84 b1       	in	r24, 0x04	; 4
 17c:	80 66       	ori	r24, 0x60	; 96
 17e:	84 b9       	out	0x04, r24	; 4
	DDRE |= _BV(DDE3) | _BV(DDE4);
 180:	8d b1       	in	r24, 0x0d	; 13
 182:	88 61       	ori	r24, 0x18	; 24
 184:	8d b9       	out	0x0d, r24	; 13
	
	init_ADC_0();
 186:	c7 df       	rcall	.-114    	; 0x116 <init_ADC_0>
	init_button();
 188:	f1 df       	rcall	.-30     	; 0x16c <init_button>
 18a:	78 94       	sei
	sei();
	
	init_timer_0(_Timer_Mode_CTC);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	46 d0       	rcall	.+140    	; 0x21c <init_timer_0>
	init_timer_1(_Timer_Mode_FastPWM);
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	58 d0       	rcall	.+176    	; 0x244 <init_timer_1>
	init_timer_3(_Timer_Mode_FastPWM);
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	b1 d0       	rcall	.+354    	; 0x2fa <init_timer_3>
	
	while (1) 
    {
		PORTB |= _BV(PB7);
 198:	2f 9a       	sbi	0x05, 7	; 5
		Timer_0_delay(1000);
 19a:	88 ee       	ldi	r24, 0xE8	; 232
 19c:	93 e0       	ldi	r25, 0x03	; 3
 19e:	08 d1       	rcall	.+528    	; 0x3b0 <Timer_0_delay>
		PORTB &= ~_BV(PB7);
 1a0:	2f 98       	cbi	0x05, 7	; 5
		Timer_0_delay(1000);
 1a2:	88 ee       	ldi	r24, 0xE8	; 232
 1a4:	93 e0       	ldi	r25, 0x03	; 3
 1a6:	04 d1       	rcall	.+520    	; 0x3b0 <Timer_0_delay>
 1a8:	f7 cf       	rjmp	.-18     	; 0x198 <main+0x22>

000001aa <__vector_29>:
 1aa:	1f 92       	push	r1
    }
}

ISR(ADC_vect) {
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	0b b6       	in	r0, 0x3b	; 59
 1b6:	0f 92       	push	r0
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
	ADC_raw = ADC;
 1d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 1d4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 1d8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_edata+0x1>
 1dc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	
	// ADC output range 0 ~ 1024 (10-bit)
	Timer_1_SetWidth(ADC_raw);
 1e0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 1e4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 1e8:	04 d1       	rcall	.+520    	; 0x3f2 <Timer_1_SetWidth>
	Timer_3_SetWidth(ADC_raw);
 1ea:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 1ee:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
	ADC_Start();
 1f2:	17 d1       	rcall	.+558    	; 0x422 <Timer_3_SetWidth>
 1f4:	8a df       	rcall	.-236    	; 0x10a <ADC_Start>
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0b be       	out	0x3b, r0	; 59
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <init_timer_0>:
#include "timer.h"

/*	This Function has been proved to be working */
void init_timer_0(enum TimerMode _mode_Timer0) {
	
	switch(_mode_Timer0) {
 21c:	81 11       	cpse	r24, r1
 21e:	11 c0       	rjmp	.+34     	; 0x242 <init_timer_0+0x26>
		case _Timer_Mode_CTC:
			
			// Disconnect waveform gen.
			TCCR0A &= ~_BV(COM0A0);
 220:	84 b5       	in	r24, 0x24	; 36
 222:	8f 7b       	andi	r24, 0xBF	; 191
 224:	84 bd       	out	0x24, r24	; 36
			TCCR0A &= ~_BV(COM0A1);
 226:	84 b5       	in	r24, 0x24	; 36
 228:	8f 77       	andi	r24, 0x7F	; 127
 22a:	84 bd       	out	0x24, r24	; 36
			
			// CTC mode
			TCCR0A &= ~_BV(WGM00);
 22c:	84 b5       	in	r24, 0x24	; 36
 22e:	8e 7f       	andi	r24, 0xFE	; 254
 230:	84 bd       	out	0x24, r24	; 36
			TCCR0A |= _BV(WGM01);
 232:	84 b5       	in	r24, 0x24	; 36
 234:	82 60       	ori	r24, 0x02	; 2
 236:	84 bd       	out	0x24, r24	; 36
			
			TCCR0B &= ~_BV(WGM02);
 238:	85 b5       	in	r24, 0x25	; 37
 23a:	87 7f       	andi	r24, 0xF7	; 247
 23c:	85 bd       	out	0x25, r24	; 37
			
			// 16 counts -> 1 ms
			OCR0A = 250;
 23e:	8a ef       	ldi	r24, 0xFA	; 250
 240:	87 bd       	out	0x27, r24	; 39
 242:	08 95       	ret

00000244 <init_timer_1>:
	}
	
/*	This Function has been proved to be working */ 
void init_timer_1(enum TimerMode _mode_timer1) {
	
	switch(_mode_timer1) {
 244:	88 23       	and	r24, r24
 246:	19 f0       	breq	.+6      	; 0x24e <init_timer_1+0xa>
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	11 f1       	breq	.+68     	; 0x290 <init_timer_1+0x4c>
 24c:	08 95       	ret
		case _Timer_Mode_CTC:
		
			// Toggle OC1A and OC1B on compare match
			TCCR1A = ( _BV(COM1A0) ) | ( _BV(COM1B0) );
 24e:	e0 e8       	ldi	r30, 0x80	; 128
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 e5       	ldi	r24, 0x50	; 80
 254:	80 83       	st	Z, r24
			
			// Timer operates in CTC mode
			TCCR1A &= ~( _BV(WGM10) );
 256:	80 81       	ld	r24, Z
 258:	8e 7f       	andi	r24, 0xFE	; 254
 25a:	80 83       	st	Z, r24
			TCCR1A &= ~( _BV(WGM11) );
 25c:	80 81       	ld	r24, Z
 25e:	8d 7f       	andi	r24, 0xFD	; 253
 260:	80 83       	st	Z, r24
			TCCR1B = ( _BV(WGM12) );
 262:	e1 e8       	ldi	r30, 0x81	; 129
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	88 e0       	ldi	r24, 0x08	; 8
 268:	80 83       	st	Z, r24
			TCCR1B &= ~( _BV(WGM13) );
 26a:	80 81       	ld	r24, Z
 26c:	8f 7e       	andi	r24, 0xEF	; 239
 26e:	80 83       	st	Z, r24
			
			// 1024 prescaler, timer starts
			TCCR1B |= _BV(CS10);
 270:	80 81       	ld	r24, Z
 272:	81 60       	ori	r24, 0x01	; 1
 274:	80 83       	st	Z, r24
			TCCR1B &= ~( _BV(CS11) );
 276:	80 81       	ld	r24, Z
 278:	8d 7f       	andi	r24, 0xFD	; 253
 27a:	80 83       	st	Z, r24
			TCCR1B |= _BV(CS12);
 27c:	80 81       	ld	r24, Z
 27e:	84 60       	ori	r24, 0x04	; 4
 280:	80 83       	st	Z, r24

			// Set OCR1A, defines the length for OC1A/B
			OCR1A = 15525;
 282:	85 ea       	ldi	r24, 0xA5	; 165
 284:	9c e3       	ldi	r25, 0x3C	; 60
 286:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 28a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
			
			break;
 28e:	08 95       	ret
			
			
		case _Timer_Mode_FastPWM:
			
			TCCR1A = 0;
 290:	a0 e8       	ldi	r26, 0x80	; 128
 292:	b0 e0       	ldi	r27, 0x00	; 0
 294:	1c 92       	st	X, r1
			TCCR1B = 0;
 296:	e1 e8       	ldi	r30, 0x81	; 129
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	10 82       	st	Z, r1
						
			// Fast PWM
			// Use xx as Top, and use OCR1A to generate waveform
			TCCR1A &= ~( _BV(WGM10) );
 29c:	8c 91       	ld	r24, X
 29e:	8e 7f       	andi	r24, 0xFE	; 254
 2a0:	8c 93       	st	X, r24
			//TCCR1A |= _BV(WGM10);
			
			TCCR1A |= _BV(WGM11);
 2a2:	8c 91       	ld	r24, X
 2a4:	82 60       	ori	r24, 0x02	; 2
 2a6:	8c 93       	st	X, r24
			//TCCR1A &= ~( _BV(WGM11) );
			
			TCCR1B |= _BV(WGM12);
 2a8:	80 81       	ld	r24, Z
 2aa:	88 60       	ori	r24, 0x08	; 8
 2ac:	80 83       	st	Z, r24
			
			//TCCR1B &= ~( _BV(WGM13) );
			TCCR1B |= _BV(WGM13);
 2ae:	80 81       	ld	r24, Z
 2b0:	80 61       	ori	r24, 0x10	; 16
 2b2:	80 83       	st	Z, r24
			
			// Non-inverting mode
			//TCCR1A = _BV(COM1A0);
			TCCR1A &= ~( _BV(COM1A0) );
 2b4:	8c 91       	ld	r24, X
 2b6:	8f 7b       	andi	r24, 0xBF	; 191
 2b8:	8c 93       	st	X, r24
			TCCR1A |= _BV(COM1A1);
 2ba:	8c 91       	ld	r24, X
 2bc:	80 68       	ori	r24, 0x80	; 128
 2be:	8c 93       	st	X, r24
			//TCCR1A &= ~( _BV(COM1A1) );
			TCCR1A |= _BV(COM1B1);
 2c0:	8c 91       	ld	r24, X
 2c2:	80 62       	ori	r24, 0x20	; 32
 2c4:	8c 93       	st	X, r24
			
			// Define Top to MAX
			ICR1 = Timer1_TOP;
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	9f e1       	ldi	r25, 0x1F	; 31
 2ca:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 2ce:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
			// 1FFF -> 8191
			
			OCR1A = 125;
 2d2:	8d e7       	ldi	r24, 0x7D	; 125
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 2da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
			OCR1B = 125;
 2de:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 2e2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
			
			// 1 prescaler
			TCCR1B |= _BV(CS10);
 2e6:	80 81       	ld	r24, Z
 2e8:	81 60       	ori	r24, 0x01	; 1
 2ea:	80 83       	st	Z, r24
			//TCCR1B &= ~( _BV(CS10) );
			TCCR1B &= ~( _BV(CS11) );
 2ec:	80 81       	ld	r24, Z
 2ee:	8d 7f       	andi	r24, 0xFD	; 253
 2f0:	80 83       	st	Z, r24
			//TCCR1B |= _BV(CS12);
			TCCR1B &= ~( _BV(CS12) );
 2f2:	80 81       	ld	r24, Z
 2f4:	8b 7f       	andi	r24, 0xFB	; 251
 2f6:	80 83       	st	Z, r24
 2f8:	08 95       	ret

000002fa <init_timer_3>:
}

/*	This Function has been proved to be working */ 
void init_timer_3(enum TimerMode _mode_timer3) {
	
	switch(_mode_timer3) {
 2fa:	88 23       	and	r24, r24
 2fc:	19 f0       	breq	.+6      	; 0x304 <init_timer_3+0xa>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	11 f1       	breq	.+68     	; 0x346 <init_timer_3+0x4c>
 302:	08 95       	ret
		case _Timer_Mode_CTC:
		
		// Toggle OC3A and OC3B on compare match
		TCCR3A = ( _BV(COM3A0) ) | ( _BV(COM3B0) );
 304:	e0 e9       	ldi	r30, 0x90	; 144
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 e5       	ldi	r24, 0x50	; 80
 30a:	80 83       	st	Z, r24
		
		// Timer operates in CTC mode
		TCCR3A &= ~( _BV(WGM30) );
 30c:	80 81       	ld	r24, Z
 30e:	8e 7f       	andi	r24, 0xFE	; 254
 310:	80 83       	st	Z, r24
		TCCR3A &= ~( _BV(WGM31) );
 312:	80 81       	ld	r24, Z
 314:	8d 7f       	andi	r24, 0xFD	; 253
 316:	80 83       	st	Z, r24
		TCCR3B = ( _BV(WGM32) );
 318:	e1 e9       	ldi	r30, 0x91	; 145
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	88 e0       	ldi	r24, 0x08	; 8
 31e:	80 83       	st	Z, r24
		TCCR3B &= ~( _BV(WGM33) );
 320:	80 81       	ld	r24, Z
 322:	8f 7e       	andi	r24, 0xEF	; 239
 324:	80 83       	st	Z, r24
		
		// 1024 prescaler, timer starts
		TCCR3B |= _BV(CS30);
 326:	80 81       	ld	r24, Z
 328:	81 60       	ori	r24, 0x01	; 1
 32a:	80 83       	st	Z, r24
		TCCR3B &= ~( _BV(CS31) );
 32c:	80 81       	ld	r24, Z
 32e:	8d 7f       	andi	r24, 0xFD	; 253
 330:	80 83       	st	Z, r24
		TCCR3B |= _BV(CS32);
 332:	80 81       	ld	r24, Z
 334:	84 60       	ori	r24, 0x04	; 4
 336:	80 83       	st	Z, r24

		// Set OCR3A, defines the length for OC3A/B
		OCR3A = 15525;
 338:	85 ea       	ldi	r24, 0xA5	; 165
 33a:	9c e3       	ldi	r25, 0x3C	; 60
 33c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 340:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
		
		break;
 344:	08 95       	ret
		
		
		case _Timer_Mode_FastPWM:
		
		TCCR3A = 0;
 346:	a0 e9       	ldi	r26, 0x90	; 144
 348:	b0 e0       	ldi	r27, 0x00	; 0
 34a:	1c 92       	st	X, r1
		TCCR3B = 0;
 34c:	e1 e9       	ldi	r30, 0x91	; 145
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	10 82       	st	Z, r1
		
		// Fast PWM
		// Use ICR3 as Top, and use OCR3A to generate waveform
		TCCR3A &= ~( _BV(WGM30) );
 352:	8c 91       	ld	r24, X
 354:	8e 7f       	andi	r24, 0xFE	; 254
 356:	8c 93       	st	X, r24
		//TCCR3A |= _BV(WGM30);
		
		TCCR3A |= _BV(WGM31);
 358:	8c 91       	ld	r24, X
 35a:	82 60       	ori	r24, 0x02	; 2
 35c:	8c 93       	st	X, r24
		//TCCR3A &= ~( _BV(WGM31) );
		
		TCCR3B |= _BV(WGM32);
 35e:	80 81       	ld	r24, Z
 360:	88 60       	ori	r24, 0x08	; 8
 362:	80 83       	st	Z, r24
		
		//TCCR3B &= ~( _BV(WGM33) );
		TCCR3B |= _BV(WGM33);
 364:	80 81       	ld	r24, Z
 366:	80 61       	ori	r24, 0x10	; 16
 368:	80 83       	st	Z, r24
		
		// Non-inverting mode
		//TCCR3A = _BV(COM3A0);
		TCCR3A &= ~( _BV(COM3A0) );
 36a:	8c 91       	ld	r24, X
 36c:	8f 7b       	andi	r24, 0xBF	; 191
 36e:	8c 93       	st	X, r24
		TCCR3A |= _BV(COM3A1);
 370:	8c 91       	ld	r24, X
 372:	80 68       	ori	r24, 0x80	; 128
 374:	8c 93       	st	X, r24
		//TCCR3A &= ~( _BV(COM3A1) );
		TCCR3A |= _BV(COM3B1);
 376:	8c 91       	ld	r24, X
 378:	80 62       	ori	r24, 0x20	; 32
 37a:	8c 93       	st	X, r24
		
		// Define Top to MAX
		ICR3 = Timer3_TOP;;
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	9f e1       	ldi	r25, 0x1F	; 31
 380:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 384:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
		// 1FFF -> 8191
		
		OCR3A = 125;
 388:	8d e7       	ldi	r24, 0x7D	; 125
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 390:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
		OCR3B = 125;
 394:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
 398:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
		
		// 1 prescaler
		TCCR3B |= _BV(CS30);
 39c:	80 81       	ld	r24, Z
 39e:	81 60       	ori	r24, 0x01	; 1
 3a0:	80 83       	st	Z, r24
		//TCCR3B &= ~( _BV(CS30) );
		TCCR3B &= ~( _BV(CS31) );
 3a2:	80 81       	ld	r24, Z
 3a4:	8d 7f       	andi	r24, 0xFD	; 253
 3a6:	80 83       	st	Z, r24
		//TCCR3B |= _BV(CS32);
		TCCR3B &= ~( _BV(CS32) );
 3a8:	80 81       	ld	r24, Z
 3aa:	8b 7f       	andi	r24, 0xFB	; 251
 3ac:	80 83       	st	Z, r24
 3ae:	08 95       	ret

000003b0 <Timer_0_delay>:

/*	This Function has been proved to be working */
void Timer_0_delay(uint _Lenght_timer0) {
	
	// Clear match flag
	TIFR0 |= _BV(OCF0A);
 3b0:	a9 9a       	sbi	0x15, 1	; 21
	
	// Clear counter
	TCNT0 = 0;
 3b2:	16 bc       	out	0x26, r1	; 38
	
	// Start Timer
	TCCR0B &= ~_BV(CS02);
 3b4:	25 b5       	in	r18, 0x25	; 37
 3b6:	2b 7f       	andi	r18, 0xFB	; 251
 3b8:	25 bd       	out	0x25, r18	; 37
	TCCR0B |= _BV(CS01);
 3ba:	25 b5       	in	r18, 0x25	; 37
 3bc:	22 60       	ori	r18, 0x02	; 2
 3be:	25 bd       	out	0x25, r18	; 37
	TCCR0B |= _BV(CS00);
 3c0:	25 b5       	in	r18, 0x25	; 37
 3c2:	21 60       	ori	r18, 0x01	; 1
 3c4:	25 bd       	out	0x25, r18	; 37
	
	for(uint _aux = 1; _aux <= _Lenght_timer0; ++_aux) {
 3c6:	00 97       	sbiw	r24, 0x00	; 0
 3c8:	51 f0       	breq	.+20     	; 0x3de <Timer_0_delay+0x2e>
 3ca:	21 e0       	ldi	r18, 0x01	; 1
 3cc:	30 e0       	ldi	r19, 0x00	; 0
		// Wait for 1 match occur, 1 ms resolution
		while( !(TIFR0 & (1 << OCF0A)) );
 3ce:	a9 9b       	sbis	0x15, 1	; 21
 3d0:	fe cf       	rjmp	.-4      	; 0x3ce <Timer_0_delay+0x1e>
		TIFR0 |= _BV(OCF0A);
 3d2:	a9 9a       	sbi	0x15, 1	; 21
	// Start Timer
	TCCR0B &= ~_BV(CS02);
	TCCR0B |= _BV(CS01);
	TCCR0B |= _BV(CS00);
	
	for(uint _aux = 1; _aux <= _Lenght_timer0; ++_aux) {
 3d4:	2f 5f       	subi	r18, 0xFF	; 255
 3d6:	3f 4f       	sbci	r19, 0xFF	; 255
 3d8:	82 17       	cp	r24, r18
 3da:	93 07       	cpc	r25, r19
 3dc:	c0 f7       	brcc	.-16     	; 0x3ce <Timer_0_delay+0x1e>
		while( !(TIFR0 & (1 << OCF0A)) );
		TIFR0 |= _BV(OCF0A);
	}
	
	// Stop Timer
	TCCR0B &= ~_BV(CS02);
 3de:	85 b5       	in	r24, 0x25	; 37
 3e0:	8b 7f       	andi	r24, 0xFB	; 251
 3e2:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~_BV(CS01);
 3e4:	85 b5       	in	r24, 0x25	; 37
 3e6:	8d 7f       	andi	r24, 0xFD	; 253
 3e8:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~_BV(CS00);
 3ea:	85 b5       	in	r24, 0x25	; 37
 3ec:	8e 7f       	andi	r24, 0xFE	; 254
 3ee:	85 bd       	out	0x25, r24	; 37
 3f0:	08 95       	ret

000003f2 <Timer_1_SetWidth>:
}

/*	This Function has been proved to be working */ 
void Timer_1_SetWidth(uint _Width_timer1) {
	OCR1A = Timer1_TOP * ( (float)_Width_timer1 / 1024);
 3f2:	bc 01       	movw	r22, r24
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	58 d0       	rcall	.+176    	; 0x4aa <__floatunsisf>
 3fa:	20 e0       	ldi	r18, 0x00	; 0
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	40 e8       	ldi	r20, 0x80	; 128
 400:	5a e3       	ldi	r21, 0x3A	; 58
 402:	b9 d0       	rcall	.+370    	; 0x576 <__mulsf3>
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	38 ef       	ldi	r19, 0xF8	; 248
 408:	4f ef       	ldi	r20, 0xFF	; 255
 40a:	55 e4       	ldi	r21, 0x45	; 69
 40c:	b4 d0       	rcall	.+360    	; 0x576 <__mulsf3>
 40e:	21 d0       	rcall	.+66     	; 0x452 <__fixunssfsi>
 410:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 414:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	OCR1B = Timer1_TOP * ( (float)_Width_timer1 / 1024);
 418:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 41c:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
 420:	08 95       	ret

00000422 <Timer_3_SetWidth>:
}

/*	This Function has been proved to be working */ 
void Timer_3_SetWidth(uint _Width_timer3) {
	OCR3A = Timer3_TOP * ( (float)_Width_timer3 / 1024);
 422:	bc 01       	movw	r22, r24
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	40 d0       	rcall	.+128    	; 0x4aa <__floatunsisf>
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	40 e8       	ldi	r20, 0x80	; 128
 430:	5a e3       	ldi	r21, 0x3A	; 58
 432:	a1 d0       	rcall	.+322    	; 0x576 <__mulsf3>
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	38 ef       	ldi	r19, 0xF8	; 248
 438:	4f ef       	ldi	r20, 0xFF	; 255
 43a:	55 e4       	ldi	r21, 0x45	; 69
 43c:	9c d0       	rcall	.+312    	; 0x576 <__mulsf3>
 43e:	09 d0       	rcall	.+18     	; 0x452 <__fixunssfsi>
 440:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 444:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	OCR3B = Timer3_TOP * ( (float)_Width_timer3 / 1024);
 448:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
 44c:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
 450:	08 95       	ret

00000452 <__fixunssfsi>:
 452:	70 d0       	rcall	.+224    	; 0x534 <__fp_splitA>
 454:	88 f0       	brcs	.+34     	; 0x478 <__fixunssfsi+0x26>
 456:	9f 57       	subi	r25, 0x7F	; 127
 458:	90 f0       	brcs	.+36     	; 0x47e <__fixunssfsi+0x2c>
 45a:	b9 2f       	mov	r27, r25
 45c:	99 27       	eor	r25, r25
 45e:	b7 51       	subi	r27, 0x17	; 23
 460:	a0 f0       	brcs	.+40     	; 0x48a <__fixunssfsi+0x38>
 462:	d1 f0       	breq	.+52     	; 0x498 <__fixunssfsi+0x46>
 464:	66 0f       	add	r22, r22
 466:	77 1f       	adc	r23, r23
 468:	88 1f       	adc	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	1a f0       	brmi	.+6      	; 0x474 <__fixunssfsi+0x22>
 46e:	ba 95       	dec	r27
 470:	c9 f7       	brne	.-14     	; 0x464 <__fixunssfsi+0x12>
 472:	12 c0       	rjmp	.+36     	; 0x498 <__fixunssfsi+0x46>
 474:	b1 30       	cpi	r27, 0x01	; 1
 476:	81 f0       	breq	.+32     	; 0x498 <__fixunssfsi+0x46>
 478:	77 d0       	rcall	.+238    	; 0x568 <__fp_zero>
 47a:	b1 e0       	ldi	r27, 0x01	; 1
 47c:	08 95       	ret
 47e:	74 c0       	rjmp	.+232    	; 0x568 <__fp_zero>
 480:	67 2f       	mov	r22, r23
 482:	78 2f       	mov	r23, r24
 484:	88 27       	eor	r24, r24
 486:	b8 5f       	subi	r27, 0xF8	; 248
 488:	39 f0       	breq	.+14     	; 0x498 <__fixunssfsi+0x46>
 48a:	b9 3f       	cpi	r27, 0xF9	; 249
 48c:	cc f3       	brlt	.-14     	; 0x480 <__fixunssfsi+0x2e>
 48e:	86 95       	lsr	r24
 490:	77 95       	ror	r23
 492:	67 95       	ror	r22
 494:	b3 95       	inc	r27
 496:	d9 f7       	brne	.-10     	; 0x48e <__fixunssfsi+0x3c>
 498:	3e f4       	brtc	.+14     	; 0x4a8 <__fixunssfsi+0x56>
 49a:	90 95       	com	r25
 49c:	80 95       	com	r24
 49e:	70 95       	com	r23
 4a0:	61 95       	neg	r22
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	8f 4f       	sbci	r24, 0xFF	; 255
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	08 95       	ret

000004aa <__floatunsisf>:
 4aa:	e8 94       	clt
 4ac:	09 c0       	rjmp	.+18     	; 0x4c0 <__floatsisf+0x12>

000004ae <__floatsisf>:
 4ae:	97 fb       	bst	r25, 7
 4b0:	3e f4       	brtc	.+14     	; 0x4c0 <__floatsisf+0x12>
 4b2:	90 95       	com	r25
 4b4:	80 95       	com	r24
 4b6:	70 95       	com	r23
 4b8:	61 95       	neg	r22
 4ba:	7f 4f       	sbci	r23, 0xFF	; 255
 4bc:	8f 4f       	sbci	r24, 0xFF	; 255
 4be:	9f 4f       	sbci	r25, 0xFF	; 255
 4c0:	99 23       	and	r25, r25
 4c2:	a9 f0       	breq	.+42     	; 0x4ee <__floatsisf+0x40>
 4c4:	f9 2f       	mov	r31, r25
 4c6:	96 e9       	ldi	r25, 0x96	; 150
 4c8:	bb 27       	eor	r27, r27
 4ca:	93 95       	inc	r25
 4cc:	f6 95       	lsr	r31
 4ce:	87 95       	ror	r24
 4d0:	77 95       	ror	r23
 4d2:	67 95       	ror	r22
 4d4:	b7 95       	ror	r27
 4d6:	f1 11       	cpse	r31, r1
 4d8:	f8 cf       	rjmp	.-16     	; 0x4ca <__floatsisf+0x1c>
 4da:	fa f4       	brpl	.+62     	; 0x51a <__floatsisf+0x6c>
 4dc:	bb 0f       	add	r27, r27
 4de:	11 f4       	brne	.+4      	; 0x4e4 <__floatsisf+0x36>
 4e0:	60 ff       	sbrs	r22, 0
 4e2:	1b c0       	rjmp	.+54     	; 0x51a <__floatsisf+0x6c>
 4e4:	6f 5f       	subi	r22, 0xFF	; 255
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255
 4e8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ea:	9f 4f       	sbci	r25, 0xFF	; 255
 4ec:	16 c0       	rjmp	.+44     	; 0x51a <__floatsisf+0x6c>
 4ee:	88 23       	and	r24, r24
 4f0:	11 f0       	breq	.+4      	; 0x4f6 <__floatsisf+0x48>
 4f2:	96 e9       	ldi	r25, 0x96	; 150
 4f4:	11 c0       	rjmp	.+34     	; 0x518 <__floatsisf+0x6a>
 4f6:	77 23       	and	r23, r23
 4f8:	21 f0       	breq	.+8      	; 0x502 <__floatsisf+0x54>
 4fa:	9e e8       	ldi	r25, 0x8E	; 142
 4fc:	87 2f       	mov	r24, r23
 4fe:	76 2f       	mov	r23, r22
 500:	05 c0       	rjmp	.+10     	; 0x50c <__floatsisf+0x5e>
 502:	66 23       	and	r22, r22
 504:	71 f0       	breq	.+28     	; 0x522 <__floatsisf+0x74>
 506:	96 e8       	ldi	r25, 0x86	; 134
 508:	86 2f       	mov	r24, r22
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	2a f0       	brmi	.+10     	; 0x51a <__floatsisf+0x6c>
 510:	9a 95       	dec	r25
 512:	66 0f       	add	r22, r22
 514:	77 1f       	adc	r23, r23
 516:	88 1f       	adc	r24, r24
 518:	da f7       	brpl	.-10     	; 0x510 <__floatsisf+0x62>
 51a:	88 0f       	add	r24, r24
 51c:	96 95       	lsr	r25
 51e:	87 95       	ror	r24
 520:	97 f9       	bld	r25, 7
 522:	08 95       	ret

00000524 <__fp_split3>:
 524:	57 fd       	sbrc	r21, 7
 526:	90 58       	subi	r25, 0x80	; 128
 528:	44 0f       	add	r20, r20
 52a:	55 1f       	adc	r21, r21
 52c:	59 f0       	breq	.+22     	; 0x544 <__fp_splitA+0x10>
 52e:	5f 3f       	cpi	r21, 0xFF	; 255
 530:	71 f0       	breq	.+28     	; 0x54e <__fp_splitA+0x1a>
 532:	47 95       	ror	r20

00000534 <__fp_splitA>:
 534:	88 0f       	add	r24, r24
 536:	97 fb       	bst	r25, 7
 538:	99 1f       	adc	r25, r25
 53a:	61 f0       	breq	.+24     	; 0x554 <__fp_splitA+0x20>
 53c:	9f 3f       	cpi	r25, 0xFF	; 255
 53e:	79 f0       	breq	.+30     	; 0x55e <__fp_splitA+0x2a>
 540:	87 95       	ror	r24
 542:	08 95       	ret
 544:	12 16       	cp	r1, r18
 546:	13 06       	cpc	r1, r19
 548:	14 06       	cpc	r1, r20
 54a:	55 1f       	adc	r21, r21
 54c:	f2 cf       	rjmp	.-28     	; 0x532 <__fp_split3+0xe>
 54e:	46 95       	lsr	r20
 550:	f1 df       	rcall	.-30     	; 0x534 <__fp_splitA>
 552:	08 c0       	rjmp	.+16     	; 0x564 <__fp_splitA+0x30>
 554:	16 16       	cp	r1, r22
 556:	17 06       	cpc	r1, r23
 558:	18 06       	cpc	r1, r24
 55a:	99 1f       	adc	r25, r25
 55c:	f1 cf       	rjmp	.-30     	; 0x540 <__fp_splitA+0xc>
 55e:	86 95       	lsr	r24
 560:	71 05       	cpc	r23, r1
 562:	61 05       	cpc	r22, r1
 564:	08 94       	sec
 566:	08 95       	ret

00000568 <__fp_zero>:
 568:	e8 94       	clt

0000056a <__fp_szero>:
 56a:	bb 27       	eor	r27, r27
 56c:	66 27       	eor	r22, r22
 56e:	77 27       	eor	r23, r23
 570:	cb 01       	movw	r24, r22
 572:	97 f9       	bld	r25, 7
 574:	08 95       	ret

00000576 <__mulsf3>:
 576:	0b d0       	rcall	.+22     	; 0x58e <__mulsf3x>
 578:	78 c0       	rjmp	.+240    	; 0x66a <__fp_round>
 57a:	69 d0       	rcall	.+210    	; 0x64e <__fp_pscA>
 57c:	28 f0       	brcs	.+10     	; 0x588 <__mulsf3+0x12>
 57e:	6e d0       	rcall	.+220    	; 0x65c <__fp_pscB>
 580:	18 f0       	brcs	.+6      	; 0x588 <__mulsf3+0x12>
 582:	95 23       	and	r25, r21
 584:	09 f0       	breq	.+2      	; 0x588 <__mulsf3+0x12>
 586:	5a c0       	rjmp	.+180    	; 0x63c <__fp_inf>
 588:	5f c0       	rjmp	.+190    	; 0x648 <__fp_nan>
 58a:	11 24       	eor	r1, r1
 58c:	ee cf       	rjmp	.-36     	; 0x56a <__fp_szero>

0000058e <__mulsf3x>:
 58e:	ca df       	rcall	.-108    	; 0x524 <__fp_split3>
 590:	a0 f3       	brcs	.-24     	; 0x57a <__mulsf3+0x4>

00000592 <__mulsf3_pse>:
 592:	95 9f       	mul	r25, r21
 594:	d1 f3       	breq	.-12     	; 0x58a <__mulsf3+0x14>
 596:	95 0f       	add	r25, r21
 598:	50 e0       	ldi	r21, 0x00	; 0
 59a:	55 1f       	adc	r21, r21
 59c:	62 9f       	mul	r22, r18
 59e:	f0 01       	movw	r30, r0
 5a0:	72 9f       	mul	r23, r18
 5a2:	bb 27       	eor	r27, r27
 5a4:	f0 0d       	add	r31, r0
 5a6:	b1 1d       	adc	r27, r1
 5a8:	63 9f       	mul	r22, r19
 5aa:	aa 27       	eor	r26, r26
 5ac:	f0 0d       	add	r31, r0
 5ae:	b1 1d       	adc	r27, r1
 5b0:	aa 1f       	adc	r26, r26
 5b2:	64 9f       	mul	r22, r20
 5b4:	66 27       	eor	r22, r22
 5b6:	b0 0d       	add	r27, r0
 5b8:	a1 1d       	adc	r26, r1
 5ba:	66 1f       	adc	r22, r22
 5bc:	82 9f       	mul	r24, r18
 5be:	22 27       	eor	r18, r18
 5c0:	b0 0d       	add	r27, r0
 5c2:	a1 1d       	adc	r26, r1
 5c4:	62 1f       	adc	r22, r18
 5c6:	73 9f       	mul	r23, r19
 5c8:	b0 0d       	add	r27, r0
 5ca:	a1 1d       	adc	r26, r1
 5cc:	62 1f       	adc	r22, r18
 5ce:	83 9f       	mul	r24, r19
 5d0:	a0 0d       	add	r26, r0
 5d2:	61 1d       	adc	r22, r1
 5d4:	22 1f       	adc	r18, r18
 5d6:	74 9f       	mul	r23, r20
 5d8:	33 27       	eor	r19, r19
 5da:	a0 0d       	add	r26, r0
 5dc:	61 1d       	adc	r22, r1
 5de:	23 1f       	adc	r18, r19
 5e0:	84 9f       	mul	r24, r20
 5e2:	60 0d       	add	r22, r0
 5e4:	21 1d       	adc	r18, r1
 5e6:	82 2f       	mov	r24, r18
 5e8:	76 2f       	mov	r23, r22
 5ea:	6a 2f       	mov	r22, r26
 5ec:	11 24       	eor	r1, r1
 5ee:	9f 57       	subi	r25, 0x7F	; 127
 5f0:	50 40       	sbci	r21, 0x00	; 0
 5f2:	8a f0       	brmi	.+34     	; 0x616 <__mulsf3_pse+0x84>
 5f4:	e1 f0       	breq	.+56     	; 0x62e <__mulsf3_pse+0x9c>
 5f6:	88 23       	and	r24, r24
 5f8:	4a f0       	brmi	.+18     	; 0x60c <__mulsf3_pse+0x7a>
 5fa:	ee 0f       	add	r30, r30
 5fc:	ff 1f       	adc	r31, r31
 5fe:	bb 1f       	adc	r27, r27
 600:	66 1f       	adc	r22, r22
 602:	77 1f       	adc	r23, r23
 604:	88 1f       	adc	r24, r24
 606:	91 50       	subi	r25, 0x01	; 1
 608:	50 40       	sbci	r21, 0x00	; 0
 60a:	a9 f7       	brne	.-22     	; 0x5f6 <__mulsf3_pse+0x64>
 60c:	9e 3f       	cpi	r25, 0xFE	; 254
 60e:	51 05       	cpc	r21, r1
 610:	70 f0       	brcs	.+28     	; 0x62e <__mulsf3_pse+0x9c>
 612:	14 c0       	rjmp	.+40     	; 0x63c <__fp_inf>
 614:	aa cf       	rjmp	.-172    	; 0x56a <__fp_szero>
 616:	5f 3f       	cpi	r21, 0xFF	; 255
 618:	ec f3       	brlt	.-6      	; 0x614 <__mulsf3_pse+0x82>
 61a:	98 3e       	cpi	r25, 0xE8	; 232
 61c:	dc f3       	brlt	.-10     	; 0x614 <__mulsf3_pse+0x82>
 61e:	86 95       	lsr	r24
 620:	77 95       	ror	r23
 622:	67 95       	ror	r22
 624:	b7 95       	ror	r27
 626:	f7 95       	ror	r31
 628:	e7 95       	ror	r30
 62a:	9f 5f       	subi	r25, 0xFF	; 255
 62c:	c1 f7       	brne	.-16     	; 0x61e <__mulsf3_pse+0x8c>
 62e:	fe 2b       	or	r31, r30
 630:	88 0f       	add	r24, r24
 632:	91 1d       	adc	r25, r1
 634:	96 95       	lsr	r25
 636:	87 95       	ror	r24
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret

0000063c <__fp_inf>:
 63c:	97 f9       	bld	r25, 7
 63e:	9f 67       	ori	r25, 0x7F	; 127
 640:	80 e8       	ldi	r24, 0x80	; 128
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	08 95       	ret

00000648 <__fp_nan>:
 648:	9f ef       	ldi	r25, 0xFF	; 255
 64a:	80 ec       	ldi	r24, 0xC0	; 192
 64c:	08 95       	ret

0000064e <__fp_pscA>:
 64e:	00 24       	eor	r0, r0
 650:	0a 94       	dec	r0
 652:	16 16       	cp	r1, r22
 654:	17 06       	cpc	r1, r23
 656:	18 06       	cpc	r1, r24
 658:	09 06       	cpc	r0, r25
 65a:	08 95       	ret

0000065c <__fp_pscB>:
 65c:	00 24       	eor	r0, r0
 65e:	0a 94       	dec	r0
 660:	12 16       	cp	r1, r18
 662:	13 06       	cpc	r1, r19
 664:	14 06       	cpc	r1, r20
 666:	05 06       	cpc	r0, r21
 668:	08 95       	ret

0000066a <__fp_round>:
 66a:	09 2e       	mov	r0, r25
 66c:	03 94       	inc	r0
 66e:	00 0c       	add	r0, r0
 670:	11 f4       	brne	.+4      	; 0x676 <__fp_round+0xc>
 672:	88 23       	and	r24, r24
 674:	52 f0       	brmi	.+20     	; 0x68a <__fp_round+0x20>
 676:	bb 0f       	add	r27, r27
 678:	40 f4       	brcc	.+16     	; 0x68a <__fp_round+0x20>
 67a:	bf 2b       	or	r27, r31
 67c:	11 f4       	brne	.+4      	; 0x682 <__fp_round+0x18>
 67e:	60 ff       	sbrs	r22, 0
 680:	04 c0       	rjmp	.+8      	; 0x68a <__fp_round+0x20>
 682:	6f 5f       	subi	r22, 0xFF	; 255
 684:	7f 4f       	sbci	r23, 0xFF	; 255
 686:	8f 4f       	sbci	r24, 0xFF	; 255
 688:	9f 4f       	sbci	r25, 0xFF	; 255
 68a:	08 95       	ret

0000068c <_exit>:
 68c:	f8 94       	cli

0000068e <__stop_program>:
 68e:	ff cf       	rjmp	.-2      	; 0x68e <__stop_program>
