
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000006f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000684  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800200  00800200  000006f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000728  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001141  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dca  00000000  00000000  00001971  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000088c  00000000  00000000  0000273b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00002fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fa  00000000  00000000  00003140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000296  00000000  00000000  0000383a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003ad0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	37 c1       	rjmp	.+622    	; 0x27c <__vector_3>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	cf c0       	rjmp	.+414    	; 0x214 <__vector_29>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a5 30       	cpi	r26, 0x05	; 5
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	41 d0       	rcall	.+130    	; 0x188 <main>
 106:	bc c2       	rjmp	.+1400   	; 0x680 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <ADC_Start>:
	
	ADC_Start();
}

void ADC_Start() {
	ADCSRA |= _BV(ADSC);
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24
 114:	08 95       	ret

00000116 <init_ADC_0>:
#include "adc.h"

void init_ADC_0() {
	
	// Set ADC reference voltage same as AVcc
	ADMUX |= _BV(REFS0);
 116:	ec e7       	ldi	r30, 0x7C	; 124
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	80 83       	st	Z, r24

	// ADC input pin
	DDRF &= ~_BV(PF0);
 120:	80 98       	cbi	0x10, 0	; 16
	
	// Set ADC0 active -> 000000
	ADMUX &= ~_BV(MUX0);
 122:	80 81       	ld	r24, Z
 124:	8e 7f       	andi	r24, 0xFE	; 254
 126:	80 83       	st	Z, r24
	ADMUX &= ~_BV(MUX1);
 128:	80 81       	ld	r24, Z
 12a:	8d 7f       	andi	r24, 0xFD	; 253
 12c:	80 83       	st	Z, r24
	ADMUX &= ~_BV(MUX2);
 12e:	80 81       	ld	r24, Z
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	80 83       	st	Z, r24
	ADMUX &= ~_BV(MUX3);
 134:	80 81       	ld	r24, Z
 136:	87 7f       	andi	r24, 0xF7	; 247
 138:	80 83       	st	Z, r24
	ADMUX &= ~_BV(MUX4);
 13a:	80 81       	ld	r24, Z
 13c:	8f 7e       	andi	r24, 0xEF	; 239
 13e:	80 83       	st	Z, r24
	ADCSRB &= ~_BV(MUX5);
 140:	eb e7       	ldi	r30, 0x7B	; 123
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	87 7f       	andi	r24, 0xF7	; 247
 148:	80 83       	st	Z, r24
	
	// Enable ADC
	ADCSRA |= _BV(ADEN);
 14a:	ea e7       	ldi	r30, 0x7A	; 122
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	80 68       	ori	r24, 0x80	; 128
 152:	80 83       	st	Z, r24
	
	// Generate an interrupt when 1 conversion done
	ADCSRA |= _BV(ADIE);
 154:	80 81       	ld	r24, Z
 156:	88 60       	ori	r24, 0x08	; 8
 158:	80 83       	st	Z, r24
	
	// 128 prescaler -> 8 us clock
	ADCSRA |= _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2);
 15a:	80 81       	ld	r24, Z
 15c:	87 60       	ori	r24, 0x07	; 7
 15e:	80 83       	st	Z, r24
	
	// Disable digital buffer
	DIDR0 |= _BV(ADC0D);
 160:	ee e7       	ldi	r30, 0x7E	; 126
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	81 60       	ori	r24, 0x01	; 1
 168:	80 83       	st	Z, r24
	
	ADC_Start();
 16a:	cf cf       	rjmp	.-98     	; 0x10a <ADC_Start>
 16c:	08 95       	ret

0000016e <init_button>:
#include "button.h"

void init_button() {
	// Dedicated button indicator on Arduino Pin 18
	// PD3
	DDRD |= _BV(DDD3);
 16e:	53 9a       	sbi	0x0a, 3	; 10
	//PORTD |= _BV(PD3);
	
	// Arduino Pin 19 as button input
	// PD2 / INT2
	DDRD &= ~_BV(DDD2);
 170:	52 98       	cbi	0x0a, 2	; 10
	
	// Enable pull-up
	PORTD |= _BV(PD2);
 172:	5a 9a       	sbi	0x0b, 2	; 11
	
	// TODO: Setup the INT2 interrupt
	// Any edge generates an interrupt
	EICRA &= ~_BV(ISC21);
 174:	e9 e6       	ldi	r30, 0x69	; 105
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	8f 7d       	andi	r24, 0xDF	; 223
 17c:	80 83       	st	Z, r24
	EICRA |= _BV(ISC20);
 17e:	80 81       	ld	r24, Z
 180:	80 61       	ori	r24, 0x10	; 16
 182:	80 83       	st	Z, r24
	
	// Enable INT2 interrupt
	EIMSK |= _BV(INT2);
 184:	ea 9a       	sbi	0x1d, 2	; 29
 186:	08 95       	ret

00000188 <main>:
volatile enum Button_State Button_PD2 = _State_Button_released;

int main(void)
{
	// On-board LED
	DDRB |= _BV(DDB7);
 188:	27 9a       	sbi	0x04, 7	; 4
		
	// Timer PWM waveform gen. pins
	//DDRB |= _BV(DDB5) | _BV(DDB6);	// Timer1
	DDRE |= _BV(DDE3) | _BV(DDE4);		// Timer3
 18a:	8d b1       	in	r24, 0x0d	; 13
 18c:	88 61       	ori	r24, 0x18	; 24
 18e:	8d b9       	out	0x0d, r24	; 13
	
	sei();
 190:	78 94       	sei
	
	init_ADC_0();
 192:	c1 df       	rcall	.-126    	; 0x116 <init_ADC_0>
	init_button();	
 194:	ec df       	rcall	.-40     	; 0x16e <init_button>
	init_timer_0(_Timer_Mode_CTC);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	8c d0       	rcall	.+280    	; 0x2b2 <init_timer_0>
	//init_timer_1(_Timer_Mode_FastPWM);
	init_timer_3(_Timer_Mode_FastPWM);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	9e d0       	rcall	.+316    	; 0x2da <init_timer_3>
 19e:	83 e0       	ldi	r24, 0x03	; 3
	
	Button_PD2 = _State_Button_to_released;
 1a0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
 1a4:	c2 e0       	ldi	r28, 0x02	; 2
    {
		switch(Button_PD2) {
			case _State_Button_to_pressed:
			
				Timer_0_delay_ms(80);
				Button_PD2 = _State_Button_pressed;
 1a6:	01 e0       	ldi	r16, 0x01	; 1
			
				Timer_0_delay_ms(80);
				
				if (Timer3_on == 0)
				{
					Timer3_on = 1;
 1a8:	10 e0       	ldi	r17, 0x00	; 0
 1aa:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
	
	Button_PD2 = _State_Button_to_released;
	
	while (1) 
    {
		switch(Button_PD2) {
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	31 f0       	breq	.+12     	; 0x1be <main+0x36>
 1b2:	68 f1       	brcs	.+90     	; 0x20e <main+0x86>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	49 f0       	breq	.+18     	; 0x1ca <main+0x42>
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	49 f0       	breq	.+18     	; 0x1ce <main+0x46>
 1bc:	f6 cf       	rjmp	.-20     	; 0x1aa <main+0x22>
			case _State_Button_to_pressed:
			
				Timer_0_delay_ms(80);
 1be:	80 e5       	ldi	r24, 0x50	; 80
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	08 d1       	rcall	.+528    	; 0x3d4 <Timer_0_delay_ms>
 1c4:	c0 93 00 02 	sts	0x0200, r28	; 0x800200 <_edata>
				Button_PD2 = _State_Button_pressed;
 1c8:	f0 cf       	rjmp	.-32     	; 0x1aa <main+0x22>
			
			case _State_Button_pressed:
			
				// Button indicator on
				//PORTB |= 1 << PB7;
				PORTD |= _BV(PD3);
 1ca:	5b 9a       	sbi	0x0b, 3	; 11
				break;
 1cc:	ee cf       	rjmp	.-36     	; 0x1aa <main+0x22>
			
			
			case _State_Button_to_released:
			
				Timer_0_delay_ms(80);
 1ce:	80 e5       	ldi	r24, 0x50	; 80
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	00 d1       	rcall	.+512    	; 0x3d4 <Timer_0_delay_ms>
 1d4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <Timer3_on>
				
				if (Timer3_on == 0)
 1d8:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <Timer3_on+0x1>
 1dc:	89 2b       	or	r24, r25
 1de:	39 f4       	brne	.+14     	; 0x1ee <main+0x66>
				{
					Timer3_on = 1;
 1e0:	10 93 02 02 	sts	0x0202, r17	; 0x800202 <Timer3_on+0x1>
 1e4:	00 93 01 02 	sts	0x0201, r16	; 0x800201 <Timer3_on>
					Timer3_Toggle(1);
 1e8:	c8 01       	movw	r24, r16
 1ea:	d2 d0       	rcall	.+420    	; 0x390 <Timer3_Toggle>
 1ec:	0d c0       	rjmp	.+26     	; 0x208 <main+0x80>
 1ee:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <Timer3_on>
				}
				else if (Timer3_on == 1)
 1f2:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <Timer3_on+0x1>
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	39 f4       	brne	.+14     	; 0x208 <main+0x80>
				{
					Timer3_on = 0;
 1fa:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <Timer3_on+0x1>
 1fe:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <Timer3_on>
					Timer3_Toggle(0);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	c4 d0       	rcall	.+392    	; 0x390 <Timer3_Toggle>
 208:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
				}
				
				Button_PD2 = _State_Button_released;
 20c:	ce cf       	rjmp	.-100    	; 0x1aa <main+0x22>
			break;
 20e:	2f 98       	cbi	0x05, 7	; 5
			
			
			case _State_Button_released:
			
				// Button indicator off
				PORTB &= ~(1 << PB7);
 210:	5b 98       	cbi	0x0b, 3	; 11
				PORTD &= ~_BV(PD3);
 212:	cb cf       	rjmp	.-106    	; 0x1aa <main+0x22>

00000214 <__vector_29>:
			break;
 214:	1f 92       	push	r1
		//_delay_ms(2000);
    }
}

/*	ADC result handling */
ISR(ADC_vect) {
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	0b b6       	in	r0, 0x3b	; 59
 220:	0f 92       	push	r0
 222:	2f 93       	push	r18
 224:	3f 93       	push	r19
 226:	4f 93       	push	r20
 228:	5f 93       	push	r21
 22a:	6f 93       	push	r22
 22c:	7f 93       	push	r23
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	af 93       	push	r26
 234:	bf 93       	push	r27
 236:	ef 93       	push	r30
 238:	ff 93       	push	r31
	ADC_raw = ADC;
 23a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 23e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 242:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <ADC_raw+0x1>
 246:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <ADC_raw>
	
	// ADC output range 0 ~ 1024 (10-bit)
	//Timer_1_SetWidth(ADC_raw);
	Timer_3_SetWidth(ADC_raw);
 24a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ADC_raw>
 24e:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ADC_raw+0x1>
 252:	e1 d0       	rcall	.+450    	; 0x416 <Timer_3_SetWidth>
	ADC_Start();
 254:	5a df       	rcall	.-332    	; 0x10a <ADC_Start>
 256:	ff 91       	pop	r31
}
 258:	ef 91       	pop	r30
 25a:	bf 91       	pop	r27
 25c:	af 91       	pop	r26
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	7f 91       	pop	r23
 264:	6f 91       	pop	r22
 266:	5f 91       	pop	r21
 268:	4f 91       	pop	r20
 26a:	3f 91       	pop	r19
 26c:	2f 91       	pop	r18
 26e:	0f 90       	pop	r0
 270:	0b be       	out	0x3b, r0	; 59
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <__vector_3>:
 27c:	1f 92       	push	r1

/*	Button interrupt handling */
ISR(INT2_vect) {
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	8f 93       	push	r24
	// Level on INT2 has changed
	// Button can be pressed or released
	if (Button_PD2 == _State_Button_released)
 288:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 28c:	81 11       	cpse	r24, r1
 28e:	04 c0       	rjmp	.+8      	; 0x298 <__vector_3+0x1c>
	{
		// Button is being pressed down, proceed to debounce
		Button_PD2 = _State_Button_to_pressed;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
 296:	07 c0       	rjmp	.+14     	; 0x2a6 <__vector_3+0x2a>
	}
	else if (Button_PD2 == _State_Button_pressed)
 298:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	19 f4       	brne	.+6      	; 0x2a6 <__vector_3+0x2a>
	{
		// Button is going be released, proceed to debounce
		Button_PD2 = _State_Button_to_released;
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	}
 2a6:	8f 91       	pop	r24
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <init_timer_0>:
}

/*	This Function has been proved to be working */ 
void Timer_1_SetWidth(uint _Width_timer1) {
	OCR1A = Timer1_TOP * ( (float)_Width_timer1 / 1024);
	OCR1B = Timer1_TOP * ( (float)_Width_timer1 / 1024);
 2b2:	81 11       	cpse	r24, r1
 2b4:	11 c0       	rjmp	.+34     	; 0x2d8 <init_timer_0+0x26>
 2b6:	84 b5       	in	r24, 0x24	; 36
 2b8:	8f 7b       	andi	r24, 0xBF	; 191
 2ba:	84 bd       	out	0x24, r24	; 36
 2bc:	84 b5       	in	r24, 0x24	; 36
 2be:	8f 77       	andi	r24, 0x7F	; 127
 2c0:	84 bd       	out	0x24, r24	; 36
 2c2:	84 b5       	in	r24, 0x24	; 36
 2c4:	8e 7f       	andi	r24, 0xFE	; 254
 2c6:	84 bd       	out	0x24, r24	; 36
 2c8:	84 b5       	in	r24, 0x24	; 36
 2ca:	82 60       	ori	r24, 0x02	; 2
 2cc:	84 bd       	out	0x24, r24	; 36
 2ce:	85 b5       	in	r24, 0x25	; 37
 2d0:	87 7f       	andi	r24, 0xF7	; 247
 2d2:	85 bd       	out	0x25, r24	; 37
 2d4:	8a ef       	ldi	r24, 0xFA	; 250
 2d6:	87 bd       	out	0x27, r24	; 39
 2d8:	08 95       	ret

000002da <init_timer_3>:
 2da:	88 23       	and	r24, r24
 2dc:	19 f0       	breq	.+6      	; 0x2e4 <init_timer_3+0xa>
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	11 f1       	breq	.+68     	; 0x326 <init_timer_3+0x4c>
 2e2:	08 95       	ret
 2e4:	e0 e9       	ldi	r30, 0x90	; 144
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 e5       	ldi	r24, 0x50	; 80
 2ea:	80 83       	st	Z, r24
 2ec:	80 81       	ld	r24, Z
 2ee:	8e 7f       	andi	r24, 0xFE	; 254
 2f0:	80 83       	st	Z, r24
 2f2:	80 81       	ld	r24, Z
 2f4:	8d 7f       	andi	r24, 0xFD	; 253
 2f6:	80 83       	st	Z, r24
 2f8:	e1 e9       	ldi	r30, 0x91	; 145
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	88 e0       	ldi	r24, 0x08	; 8
 2fe:	80 83       	st	Z, r24
 300:	80 81       	ld	r24, Z
 302:	8f 7e       	andi	r24, 0xEF	; 239
 304:	80 83       	st	Z, r24
 306:	80 81       	ld	r24, Z
 308:	81 60       	ori	r24, 0x01	; 1
 30a:	80 83       	st	Z, r24
 30c:	80 81       	ld	r24, Z
 30e:	8d 7f       	andi	r24, 0xFD	; 253
 310:	80 83       	st	Z, r24
 312:	80 81       	ld	r24, Z
 314:	84 60       	ori	r24, 0x04	; 4
 316:	80 83       	st	Z, r24
 318:	85 ea       	ldi	r24, 0xA5	; 165
 31a:	9c e3       	ldi	r25, 0x3C	; 60
 31c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 320:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
 324:	08 95       	ret
 326:	a0 e9       	ldi	r26, 0x90	; 144
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	1c 92       	st	X, r1
 32c:	e1 e9       	ldi	r30, 0x91	; 145
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	10 82       	st	Z, r1
 332:	8c 91       	ld	r24, X
 334:	8e 7f       	andi	r24, 0xFE	; 254
 336:	8c 93       	st	X, r24
 338:	8c 91       	ld	r24, X
 33a:	82 60       	ori	r24, 0x02	; 2
 33c:	8c 93       	st	X, r24
 33e:	80 81       	ld	r24, Z
 340:	88 60       	ori	r24, 0x08	; 8
 342:	80 83       	st	Z, r24
 344:	80 81       	ld	r24, Z
 346:	80 61       	ori	r24, 0x10	; 16
 348:	80 83       	st	Z, r24
 34a:	8c 91       	ld	r24, X
 34c:	8f 7b       	andi	r24, 0xBF	; 191
 34e:	8c 93       	st	X, r24
 350:	8c 91       	ld	r24, X
 352:	80 68       	ori	r24, 0x80	; 128
 354:	8c 93       	st	X, r24
 356:	8c 91       	ld	r24, X
 358:	80 62       	ori	r24, 0x20	; 32
 35a:	8c 93       	st	X, r24
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	9f e1       	ldi	r25, 0x1F	; 31
 360:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 364:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
 368:	8d e7       	ldi	r24, 0x7D	; 125
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 370:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
 374:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
 378:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
 37c:	80 81       	ld	r24, Z
 37e:	81 60       	ori	r24, 0x01	; 1
 380:	80 83       	st	Z, r24
 382:	80 81       	ld	r24, Z
 384:	8d 7f       	andi	r24, 0xFD	; 253
 386:	80 83       	st	Z, r24
 388:	80 81       	ld	r24, Z
 38a:	8b 7f       	andi	r24, 0xFB	; 251
 38c:	80 83       	st	Z, r24
 38e:	08 95       	ret

00000390 <Timer3_Toggle>:
 390:	00 97       	sbiw	r24, 0x00	; 0
 392:	91 f4       	brne	.+36     	; 0x3b8 <Timer3_Toggle+0x28>
 394:	ea e7       	ldi	r30, 0x7A	; 122
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	8f 77       	andi	r24, 0x7F	; 127
 39c:	80 83       	st	Z, r24
 39e:	e0 e9       	ldi	r30, 0x90	; 144
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	8f 77       	andi	r24, 0x7F	; 127
 3a6:	80 83       	st	Z, r24
 3a8:	80 81       	ld	r24, Z
 3aa:	8f 7b       	andi	r24, 0xBF	; 191
 3ac:	80 83       	st	Z, r24
 3ae:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 3b2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
 3b6:	08 95       	ret
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	59 f4       	brne	.+22     	; 0x3d2 <Timer3_Toggle+0x42>
 3bc:	e0 e9       	ldi	r30, 0x90	; 144
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	80 68       	ori	r24, 0x80	; 128
 3c4:	80 83       	st	Z, r24
 3c6:	ea e7       	ldi	r30, 0x7A	; 122
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	80 68       	ori	r24, 0x80	; 128
 3ce:	80 83       	st	Z, r24
 3d0:	9c ce       	rjmp	.-712    	; 0x10a <ADC_Start>
 3d2:	08 95       	ret

000003d4 <Timer_0_delay_ms>:
 3d4:	a9 9a       	sbi	0x15, 1	; 21
 3d6:	16 bc       	out	0x26, r1	; 38
 3d8:	25 b5       	in	r18, 0x25	; 37
 3da:	2b 7f       	andi	r18, 0xFB	; 251
 3dc:	25 bd       	out	0x25, r18	; 37
 3de:	25 b5       	in	r18, 0x25	; 37
 3e0:	22 60       	ori	r18, 0x02	; 2
 3e2:	25 bd       	out	0x25, r18	; 37
 3e4:	25 b5       	in	r18, 0x25	; 37
 3e6:	21 60       	ori	r18, 0x01	; 1
 3e8:	25 bd       	out	0x25, r18	; 37
 3ea:	00 97       	sbiw	r24, 0x00	; 0
 3ec:	51 f0       	breq	.+20     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	a9 9b       	sbis	0x15, 1	; 21
 3f4:	fe cf       	rjmp	.-4      	; 0x3f2 <Timer_0_delay_ms+0x1e>
 3f6:	a9 9a       	sbi	0x15, 1	; 21
 3f8:	2f 5f       	subi	r18, 0xFF	; 255
 3fa:	3f 4f       	sbci	r19, 0xFF	; 255
 3fc:	82 17       	cp	r24, r18
 3fe:	93 07       	cpc	r25, r19
 400:	c0 f7       	brcc	.-16     	; 0x3f2 <Timer_0_delay_ms+0x1e>
 402:	85 b5       	in	r24, 0x25	; 37
 404:	8b 7f       	andi	r24, 0xFB	; 251
 406:	85 bd       	out	0x25, r24	; 37
 408:	85 b5       	in	r24, 0x25	; 37
 40a:	8d 7f       	andi	r24, 0xFD	; 253
 40c:	85 bd       	out	0x25, r24	; 37
 40e:	85 b5       	in	r24, 0x25	; 37
 410:	8e 7f       	andi	r24, 0xFE	; 254
 412:	85 bd       	out	0x25, r24	; 37
 414:	08 95       	ret

00000416 <Timer_3_SetWidth>:
}

/*	This Function has been proved to be working */ 
void Timer_3_SetWidth(uint _Width_timer3) {
	OCR3A = Timer3_TOP * ( (float)_Width_timer3 / 1024);
 416:	bc 01       	movw	r22, r24
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	40 d0       	rcall	.+128    	; 0x49e <__floatunsisf>
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	40 e8       	ldi	r20, 0x80	; 128
 424:	5a e3       	ldi	r21, 0x3A	; 58
 426:	a1 d0       	rcall	.+322    	; 0x56a <__mulsf3>
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	38 ef       	ldi	r19, 0xF8	; 248
 42c:	4f ef       	ldi	r20, 0xFF	; 255
 42e:	55 e4       	ldi	r21, 0x45	; 69
 430:	9c d0       	rcall	.+312    	; 0x56a <__mulsf3>
 432:	09 d0       	rcall	.+18     	; 0x446 <__fixunssfsi>
 434:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 438:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	OCR3B = Timer3_TOP * ( (float)_Width_timer3 / 1024);
 43c:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
 440:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
 444:	08 95       	ret

00000446 <__fixunssfsi>:
 446:	70 d0       	rcall	.+224    	; 0x528 <__fp_splitA>
 448:	88 f0       	brcs	.+34     	; 0x46c <__fixunssfsi+0x26>
 44a:	9f 57       	subi	r25, 0x7F	; 127
 44c:	90 f0       	brcs	.+36     	; 0x472 <__fixunssfsi+0x2c>
 44e:	b9 2f       	mov	r27, r25
 450:	99 27       	eor	r25, r25
 452:	b7 51       	subi	r27, 0x17	; 23
 454:	a0 f0       	brcs	.+40     	; 0x47e <__fixunssfsi+0x38>
 456:	d1 f0       	breq	.+52     	; 0x48c <__fixunssfsi+0x46>
 458:	66 0f       	add	r22, r22
 45a:	77 1f       	adc	r23, r23
 45c:	88 1f       	adc	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	1a f0       	brmi	.+6      	; 0x468 <__fixunssfsi+0x22>
 462:	ba 95       	dec	r27
 464:	c9 f7       	brne	.-14     	; 0x458 <__fixunssfsi+0x12>
 466:	12 c0       	rjmp	.+36     	; 0x48c <__fixunssfsi+0x46>
 468:	b1 30       	cpi	r27, 0x01	; 1
 46a:	81 f0       	breq	.+32     	; 0x48c <__fixunssfsi+0x46>
 46c:	77 d0       	rcall	.+238    	; 0x55c <__fp_zero>
 46e:	b1 e0       	ldi	r27, 0x01	; 1
 470:	08 95       	ret
 472:	74 c0       	rjmp	.+232    	; 0x55c <__fp_zero>
 474:	67 2f       	mov	r22, r23
 476:	78 2f       	mov	r23, r24
 478:	88 27       	eor	r24, r24
 47a:	b8 5f       	subi	r27, 0xF8	; 248
 47c:	39 f0       	breq	.+14     	; 0x48c <__fixunssfsi+0x46>
 47e:	b9 3f       	cpi	r27, 0xF9	; 249
 480:	cc f3       	brlt	.-14     	; 0x474 <__fixunssfsi+0x2e>
 482:	86 95       	lsr	r24
 484:	77 95       	ror	r23
 486:	67 95       	ror	r22
 488:	b3 95       	inc	r27
 48a:	d9 f7       	brne	.-10     	; 0x482 <__fixunssfsi+0x3c>
 48c:	3e f4       	brtc	.+14     	; 0x49c <__fixunssfsi+0x56>
 48e:	90 95       	com	r25
 490:	80 95       	com	r24
 492:	70 95       	com	r23
 494:	61 95       	neg	r22
 496:	7f 4f       	sbci	r23, 0xFF	; 255
 498:	8f 4f       	sbci	r24, 0xFF	; 255
 49a:	9f 4f       	sbci	r25, 0xFF	; 255
 49c:	08 95       	ret

0000049e <__floatunsisf>:
 49e:	e8 94       	clt
 4a0:	09 c0       	rjmp	.+18     	; 0x4b4 <__floatsisf+0x12>

000004a2 <__floatsisf>:
 4a2:	97 fb       	bst	r25, 7
 4a4:	3e f4       	brtc	.+14     	; 0x4b4 <__floatsisf+0x12>
 4a6:	90 95       	com	r25
 4a8:	80 95       	com	r24
 4aa:	70 95       	com	r23
 4ac:	61 95       	neg	r22
 4ae:	7f 4f       	sbci	r23, 0xFF	; 255
 4b0:	8f 4f       	sbci	r24, 0xFF	; 255
 4b2:	9f 4f       	sbci	r25, 0xFF	; 255
 4b4:	99 23       	and	r25, r25
 4b6:	a9 f0       	breq	.+42     	; 0x4e2 <__floatsisf+0x40>
 4b8:	f9 2f       	mov	r31, r25
 4ba:	96 e9       	ldi	r25, 0x96	; 150
 4bc:	bb 27       	eor	r27, r27
 4be:	93 95       	inc	r25
 4c0:	f6 95       	lsr	r31
 4c2:	87 95       	ror	r24
 4c4:	77 95       	ror	r23
 4c6:	67 95       	ror	r22
 4c8:	b7 95       	ror	r27
 4ca:	f1 11       	cpse	r31, r1
 4cc:	f8 cf       	rjmp	.-16     	; 0x4be <__floatsisf+0x1c>
 4ce:	fa f4       	brpl	.+62     	; 0x50e <__floatsisf+0x6c>
 4d0:	bb 0f       	add	r27, r27
 4d2:	11 f4       	brne	.+4      	; 0x4d8 <__floatsisf+0x36>
 4d4:	60 ff       	sbrs	r22, 0
 4d6:	1b c0       	rjmp	.+54     	; 0x50e <__floatsisf+0x6c>
 4d8:	6f 5f       	subi	r22, 0xFF	; 255
 4da:	7f 4f       	sbci	r23, 0xFF	; 255
 4dc:	8f 4f       	sbci	r24, 0xFF	; 255
 4de:	9f 4f       	sbci	r25, 0xFF	; 255
 4e0:	16 c0       	rjmp	.+44     	; 0x50e <__floatsisf+0x6c>
 4e2:	88 23       	and	r24, r24
 4e4:	11 f0       	breq	.+4      	; 0x4ea <__floatsisf+0x48>
 4e6:	96 e9       	ldi	r25, 0x96	; 150
 4e8:	11 c0       	rjmp	.+34     	; 0x50c <__floatsisf+0x6a>
 4ea:	77 23       	and	r23, r23
 4ec:	21 f0       	breq	.+8      	; 0x4f6 <__floatsisf+0x54>
 4ee:	9e e8       	ldi	r25, 0x8E	; 142
 4f0:	87 2f       	mov	r24, r23
 4f2:	76 2f       	mov	r23, r22
 4f4:	05 c0       	rjmp	.+10     	; 0x500 <__floatsisf+0x5e>
 4f6:	66 23       	and	r22, r22
 4f8:	71 f0       	breq	.+28     	; 0x516 <__floatsisf+0x74>
 4fa:	96 e8       	ldi	r25, 0x86	; 134
 4fc:	86 2f       	mov	r24, r22
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	2a f0       	brmi	.+10     	; 0x50e <__floatsisf+0x6c>
 504:	9a 95       	dec	r25
 506:	66 0f       	add	r22, r22
 508:	77 1f       	adc	r23, r23
 50a:	88 1f       	adc	r24, r24
 50c:	da f7       	brpl	.-10     	; 0x504 <__floatsisf+0x62>
 50e:	88 0f       	add	r24, r24
 510:	96 95       	lsr	r25
 512:	87 95       	ror	r24
 514:	97 f9       	bld	r25, 7
 516:	08 95       	ret

00000518 <__fp_split3>:
 518:	57 fd       	sbrc	r21, 7
 51a:	90 58       	subi	r25, 0x80	; 128
 51c:	44 0f       	add	r20, r20
 51e:	55 1f       	adc	r21, r21
 520:	59 f0       	breq	.+22     	; 0x538 <__fp_splitA+0x10>
 522:	5f 3f       	cpi	r21, 0xFF	; 255
 524:	71 f0       	breq	.+28     	; 0x542 <__fp_splitA+0x1a>
 526:	47 95       	ror	r20

00000528 <__fp_splitA>:
 528:	88 0f       	add	r24, r24
 52a:	97 fb       	bst	r25, 7
 52c:	99 1f       	adc	r25, r25
 52e:	61 f0       	breq	.+24     	; 0x548 <__fp_splitA+0x20>
 530:	9f 3f       	cpi	r25, 0xFF	; 255
 532:	79 f0       	breq	.+30     	; 0x552 <__fp_splitA+0x2a>
 534:	87 95       	ror	r24
 536:	08 95       	ret
 538:	12 16       	cp	r1, r18
 53a:	13 06       	cpc	r1, r19
 53c:	14 06       	cpc	r1, r20
 53e:	55 1f       	adc	r21, r21
 540:	f2 cf       	rjmp	.-28     	; 0x526 <__fp_split3+0xe>
 542:	46 95       	lsr	r20
 544:	f1 df       	rcall	.-30     	; 0x528 <__fp_splitA>
 546:	08 c0       	rjmp	.+16     	; 0x558 <__fp_splitA+0x30>
 548:	16 16       	cp	r1, r22
 54a:	17 06       	cpc	r1, r23
 54c:	18 06       	cpc	r1, r24
 54e:	99 1f       	adc	r25, r25
 550:	f1 cf       	rjmp	.-30     	; 0x534 <__fp_splitA+0xc>
 552:	86 95       	lsr	r24
 554:	71 05       	cpc	r23, r1
 556:	61 05       	cpc	r22, r1
 558:	08 94       	sec
 55a:	08 95       	ret

0000055c <__fp_zero>:
 55c:	e8 94       	clt

0000055e <__fp_szero>:
 55e:	bb 27       	eor	r27, r27
 560:	66 27       	eor	r22, r22
 562:	77 27       	eor	r23, r23
 564:	cb 01       	movw	r24, r22
 566:	97 f9       	bld	r25, 7
 568:	08 95       	ret

0000056a <__mulsf3>:
 56a:	0b d0       	rcall	.+22     	; 0x582 <__mulsf3x>
 56c:	78 c0       	rjmp	.+240    	; 0x65e <__fp_round>
 56e:	69 d0       	rcall	.+210    	; 0x642 <__fp_pscA>
 570:	28 f0       	brcs	.+10     	; 0x57c <__mulsf3+0x12>
 572:	6e d0       	rcall	.+220    	; 0x650 <__fp_pscB>
 574:	18 f0       	brcs	.+6      	; 0x57c <__mulsf3+0x12>
 576:	95 23       	and	r25, r21
 578:	09 f0       	breq	.+2      	; 0x57c <__mulsf3+0x12>
 57a:	5a c0       	rjmp	.+180    	; 0x630 <__fp_inf>
 57c:	5f c0       	rjmp	.+190    	; 0x63c <__fp_nan>
 57e:	11 24       	eor	r1, r1
 580:	ee cf       	rjmp	.-36     	; 0x55e <__fp_szero>

00000582 <__mulsf3x>:
 582:	ca df       	rcall	.-108    	; 0x518 <__fp_split3>
 584:	a0 f3       	brcs	.-24     	; 0x56e <__mulsf3+0x4>

00000586 <__mulsf3_pse>:
 586:	95 9f       	mul	r25, r21
 588:	d1 f3       	breq	.-12     	; 0x57e <__mulsf3+0x14>
 58a:	95 0f       	add	r25, r21
 58c:	50 e0       	ldi	r21, 0x00	; 0
 58e:	55 1f       	adc	r21, r21
 590:	62 9f       	mul	r22, r18
 592:	f0 01       	movw	r30, r0
 594:	72 9f       	mul	r23, r18
 596:	bb 27       	eor	r27, r27
 598:	f0 0d       	add	r31, r0
 59a:	b1 1d       	adc	r27, r1
 59c:	63 9f       	mul	r22, r19
 59e:	aa 27       	eor	r26, r26
 5a0:	f0 0d       	add	r31, r0
 5a2:	b1 1d       	adc	r27, r1
 5a4:	aa 1f       	adc	r26, r26
 5a6:	64 9f       	mul	r22, r20
 5a8:	66 27       	eor	r22, r22
 5aa:	b0 0d       	add	r27, r0
 5ac:	a1 1d       	adc	r26, r1
 5ae:	66 1f       	adc	r22, r22
 5b0:	82 9f       	mul	r24, r18
 5b2:	22 27       	eor	r18, r18
 5b4:	b0 0d       	add	r27, r0
 5b6:	a1 1d       	adc	r26, r1
 5b8:	62 1f       	adc	r22, r18
 5ba:	73 9f       	mul	r23, r19
 5bc:	b0 0d       	add	r27, r0
 5be:	a1 1d       	adc	r26, r1
 5c0:	62 1f       	adc	r22, r18
 5c2:	83 9f       	mul	r24, r19
 5c4:	a0 0d       	add	r26, r0
 5c6:	61 1d       	adc	r22, r1
 5c8:	22 1f       	adc	r18, r18
 5ca:	74 9f       	mul	r23, r20
 5cc:	33 27       	eor	r19, r19
 5ce:	a0 0d       	add	r26, r0
 5d0:	61 1d       	adc	r22, r1
 5d2:	23 1f       	adc	r18, r19
 5d4:	84 9f       	mul	r24, r20
 5d6:	60 0d       	add	r22, r0
 5d8:	21 1d       	adc	r18, r1
 5da:	82 2f       	mov	r24, r18
 5dc:	76 2f       	mov	r23, r22
 5de:	6a 2f       	mov	r22, r26
 5e0:	11 24       	eor	r1, r1
 5e2:	9f 57       	subi	r25, 0x7F	; 127
 5e4:	50 40       	sbci	r21, 0x00	; 0
 5e6:	8a f0       	brmi	.+34     	; 0x60a <__mulsf3_pse+0x84>
 5e8:	e1 f0       	breq	.+56     	; 0x622 <__mulsf3_pse+0x9c>
 5ea:	88 23       	and	r24, r24
 5ec:	4a f0       	brmi	.+18     	; 0x600 <__mulsf3_pse+0x7a>
 5ee:	ee 0f       	add	r30, r30
 5f0:	ff 1f       	adc	r31, r31
 5f2:	bb 1f       	adc	r27, r27
 5f4:	66 1f       	adc	r22, r22
 5f6:	77 1f       	adc	r23, r23
 5f8:	88 1f       	adc	r24, r24
 5fa:	91 50       	subi	r25, 0x01	; 1
 5fc:	50 40       	sbci	r21, 0x00	; 0
 5fe:	a9 f7       	brne	.-22     	; 0x5ea <__mulsf3_pse+0x64>
 600:	9e 3f       	cpi	r25, 0xFE	; 254
 602:	51 05       	cpc	r21, r1
 604:	70 f0       	brcs	.+28     	; 0x622 <__mulsf3_pse+0x9c>
 606:	14 c0       	rjmp	.+40     	; 0x630 <__fp_inf>
 608:	aa cf       	rjmp	.-172    	; 0x55e <__fp_szero>
 60a:	5f 3f       	cpi	r21, 0xFF	; 255
 60c:	ec f3       	brlt	.-6      	; 0x608 <__mulsf3_pse+0x82>
 60e:	98 3e       	cpi	r25, 0xE8	; 232
 610:	dc f3       	brlt	.-10     	; 0x608 <__mulsf3_pse+0x82>
 612:	86 95       	lsr	r24
 614:	77 95       	ror	r23
 616:	67 95       	ror	r22
 618:	b7 95       	ror	r27
 61a:	f7 95       	ror	r31
 61c:	e7 95       	ror	r30
 61e:	9f 5f       	subi	r25, 0xFF	; 255
 620:	c1 f7       	brne	.-16     	; 0x612 <__mulsf3_pse+0x8c>
 622:	fe 2b       	or	r31, r30
 624:	88 0f       	add	r24, r24
 626:	91 1d       	adc	r25, r1
 628:	96 95       	lsr	r25
 62a:	87 95       	ror	r24
 62c:	97 f9       	bld	r25, 7
 62e:	08 95       	ret

00000630 <__fp_inf>:
 630:	97 f9       	bld	r25, 7
 632:	9f 67       	ori	r25, 0x7F	; 127
 634:	80 e8       	ldi	r24, 0x80	; 128
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	08 95       	ret

0000063c <__fp_nan>:
 63c:	9f ef       	ldi	r25, 0xFF	; 255
 63e:	80 ec       	ldi	r24, 0xC0	; 192
 640:	08 95       	ret

00000642 <__fp_pscA>:
 642:	00 24       	eor	r0, r0
 644:	0a 94       	dec	r0
 646:	16 16       	cp	r1, r22
 648:	17 06       	cpc	r1, r23
 64a:	18 06       	cpc	r1, r24
 64c:	09 06       	cpc	r0, r25
 64e:	08 95       	ret

00000650 <__fp_pscB>:
 650:	00 24       	eor	r0, r0
 652:	0a 94       	dec	r0
 654:	12 16       	cp	r1, r18
 656:	13 06       	cpc	r1, r19
 658:	14 06       	cpc	r1, r20
 65a:	05 06       	cpc	r0, r21
 65c:	08 95       	ret

0000065e <__fp_round>:
 65e:	09 2e       	mov	r0, r25
 660:	03 94       	inc	r0
 662:	00 0c       	add	r0, r0
 664:	11 f4       	brne	.+4      	; 0x66a <__fp_round+0xc>
 666:	88 23       	and	r24, r24
 668:	52 f0       	brmi	.+20     	; 0x67e <__fp_round+0x20>
 66a:	bb 0f       	add	r27, r27
 66c:	40 f4       	brcc	.+16     	; 0x67e <__fp_round+0x20>
 66e:	bf 2b       	or	r27, r31
 670:	11 f4       	brne	.+4      	; 0x676 <__fp_round+0x18>
 672:	60 ff       	sbrs	r22, 0
 674:	04 c0       	rjmp	.+8      	; 0x67e <__fp_round+0x20>
 676:	6f 5f       	subi	r22, 0xFF	; 255
 678:	7f 4f       	sbci	r23, 0xFF	; 255
 67a:	8f 4f       	sbci	r24, 0xFF	; 255
 67c:	9f 4f       	sbci	r25, 0xFF	; 255
 67e:	08 95       	ret

00000680 <_exit>:
 680:	f8 94       	cli

00000682 <__stop_program>:
 682:	ff cf       	rjmp	.-2      	; 0x682 <__stop_program>
