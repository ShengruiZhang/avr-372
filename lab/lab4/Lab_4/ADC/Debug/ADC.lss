
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000572  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  00000572  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000572  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e56  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cde  00000000  00000000  000014aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052f  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  000026b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059d  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000105  00000000  00000000  00002d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002e2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	85 c0       	rjmp	.+266    	; 0x180 <__vector_29>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	33 d0       	rcall	.+102    	; 0x16c <main>
 106:	f9 c1       	rjmp	.+1010   	; 0x4fa <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <ADC_Start>:
	
	ADC_Start();
}

void ADC_Start() {
	ADCSRA |= _BV(ADSC);
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24
 114:	08 95       	ret

00000116 <init_ADC_5>:
#include "adc.h"

void init_ADC_5() {
	
	// Set ADC reference voltage same as AVcc
	ADMUX |= _BV(REFS0);
 116:	ec e7       	ldi	r30, 0x7C	; 124
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	80 83       	st	Z, r24
	
	// Set ADC5 active -> 000101
	//ADMUX |= _BV(MUX2) | _BV(MUX0);
	
	// Set ADC0 active -> 000000
	ADMUX &= ~_BV(MUX0);
 120:	80 81       	ld	r24, Z
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	80 83       	st	Z, r24
	ADMUX &= ~_BV(MUX1);
 126:	80 81       	ld	r24, Z
 128:	8d 7f       	andi	r24, 0xFD	; 253
 12a:	80 83       	st	Z, r24
	ADMUX &= ~_BV(MUX2);
 12c:	80 81       	ld	r24, Z
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	80 83       	st	Z, r24
	ADMUX &= ~_BV(MUX3);
 132:	80 81       	ld	r24, Z
 134:	87 7f       	andi	r24, 0xF7	; 247
 136:	80 83       	st	Z, r24
	ADMUX &= ~_BV(MUX4);
 138:	80 81       	ld	r24, Z
 13a:	8f 7e       	andi	r24, 0xEF	; 239
 13c:	80 83       	st	Z, r24
	ADCSRB &= ~_BV(MUX5);
 13e:	eb e7       	ldi	r30, 0x7B	; 123
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	87 7f       	andi	r24, 0xF7	; 247
 146:	80 83       	st	Z, r24
	
	// Enable ADC
	ADCSRA |= _BV(ADEN);
 148:	ea e7       	ldi	r30, 0x7A	; 122
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 68       	ori	r24, 0x80	; 128
 150:	80 83       	st	Z, r24
	
	// Generate an interrupt when 1 conversion done
	ADCSRA |= _BV(ADIE);
 152:	80 81       	ld	r24, Z
 154:	88 60       	ori	r24, 0x08	; 8
 156:	80 83       	st	Z, r24
	
	// 128 prescaler -> 8 us clock
	ADCSRA |= _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2);
 158:	80 81       	ld	r24, Z
 15a:	87 60       	ori	r24, 0x07	; 7
 15c:	80 83       	st	Z, r24
	
	// Disable digital buffer
	DIDR0 |= _BV(ADC0D);
 15e:	ee e7       	ldi	r30, 0x7E	; 126
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	81 60       	ori	r24, 0x01	; 1
 166:	80 83       	st	Z, r24
	
	ADC_Start();
 168:	d0 cf       	rjmp	.-96     	; 0x10a <ADC_Start>
 16a:	08 95       	ret

0000016c <main>:

volatile uint ADC_raw = 0.0;

int main(void)
{
	DDRB |= _BV(DDB7);
 16c:	27 9a       	sbi	0x04, 7	; 4
	DDRF &= ~_BV(PF0);
 16e:	80 98       	cbi	0x10, 0	; 16
	
	DDRB |= _BV(DDB5) | _BV(DDB6);
 170:	84 b1       	in	r24, 0x04	; 4
 172:	80 66       	ori	r24, 0x60	; 96
 174:	84 b9       	out	0x04, r24	; 4
	
	sei();
 176:	78 94       	sei
	
	init_timer_16(_Timer_Mode_FastPWM);
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	47 d0       	rcall	.+142    	; 0x20a <init_timer_16>
	init_ADC_5();
 17c:	cc df       	rcall	.-104    	; 0x116 <init_ADC_5>
 17e:	ff cf       	rjmp	.-2      	; 0x17e <main+0x12>

00000180 <__vector_29>:
 180:	1f 92       	push	r1
    {

    }
}

ISR(ADC_vect) {
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	0b b6       	in	r0, 0x3b	; 59
 18c:	0f 92       	push	r0
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	ADC_raw = ADC;
 1a6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 1aa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 1ae:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_edata+0x1>
 1b2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	// ADC output range 0 ~ 1024 (10-bit)
	OCR1A = 8190 * ((float)ADC_raw / 1024);
 1b6:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_edata>
 1ba:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_edata+0x1>
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	aa d0       	rcall	.+340    	; 0x318 <__floatunsisf>
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	40 e8       	ldi	r20, 0x80	; 128
 1ca:	5a e3       	ldi	r21, 0x3A	; 58
 1cc:	0b d1       	rcall	.+534    	; 0x3e4 <__mulsf3>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 ef       	ldi	r19, 0xF0	; 240
 1d2:	4f ef       	ldi	r20, 0xFF	; 255
 1d4:	55 e4       	ldi	r21, 0x45	; 69
 1d6:	06 d1       	rcall	.+524    	; 0x3e4 <__mulsf3>
 1d8:	73 d0       	rcall	.+230    	; 0x2c0 <__fixunssfsi>
 1da:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 1de:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	ADC_Start();
 1e2:	93 df       	rcall	.-218    	; 0x10a <ADC_Start>
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	bf 91       	pop	r27
 1ea:	af 91       	pop	r26
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	7f 91       	pop	r23
 1f2:	6f 91       	pop	r22
 1f4:	5f 91       	pop	r21
 1f6:	4f 91       	pop	r20
 1f8:	3f 91       	pop	r19
 1fa:	2f 91       	pop	r18
 1fc:	0f 90       	pop	r0
 1fe:	0b be       	out	0x3b, r0	; 59
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <init_timer_16>:
 20a:	88 23       	and	r24, r24
#include "timer.h"

/*	This Function has been proved to be working */ 
void init_timer_16(enum TimerMode _mode) {
	
	switch(_mode) {
 20c:	19 f0       	breq	.+6      	; 0x214 <init_timer_16+0xa>
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	11 f1       	breq	.+68     	; 0x256 <init_timer_16+0x4c>
 212:	08 95       	ret
		case _Timer_Mode_CTC:
		
			// Toggle OC1A and OC1B on compare match
			TCCR1A = ( _BV(COM1A0) ) | ( _BV(COM1B0) );
 214:	e0 e8       	ldi	r30, 0x80	; 128
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 e5       	ldi	r24, 0x50	; 80
 21a:	80 83       	st	Z, r24
			
			// Timer operates in CTC mode
			TCCR1A &= ~( _BV(WGM10) );
 21c:	80 81       	ld	r24, Z
 21e:	8e 7f       	andi	r24, 0xFE	; 254
 220:	80 83       	st	Z, r24
			TCCR1A &= ~( _BV(WGM11) );
 222:	80 81       	ld	r24, Z
 224:	8d 7f       	andi	r24, 0xFD	; 253
 226:	80 83       	st	Z, r24
			TCCR1B = ( _BV(WGM12) );
 228:	e1 e8       	ldi	r30, 0x81	; 129
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	88 e0       	ldi	r24, 0x08	; 8
 22e:	80 83       	st	Z, r24
			TCCR1B &= ~( _BV(WGM13) );
 230:	80 81       	ld	r24, Z
 232:	8f 7e       	andi	r24, 0xEF	; 239
 234:	80 83       	st	Z, r24
			
			// 1024 prescaler, timer starts
			TCCR1B |= _BV(CS10);
 236:	80 81       	ld	r24, Z
 238:	81 60       	ori	r24, 0x01	; 1
 23a:	80 83       	st	Z, r24
			TCCR1B &= ~( _BV(CS11) );
 23c:	80 81       	ld	r24, Z
 23e:	8d 7f       	andi	r24, 0xFD	; 253
 240:	80 83       	st	Z, r24
			TCCR1B |= _BV(CS12);
 242:	80 81       	ld	r24, Z
 244:	84 60       	ori	r24, 0x04	; 4
 246:	80 83       	st	Z, r24

			// Set OCR1A, defines the length for OC1A/B
			OCR1A = 15525;
 248:	85 ea       	ldi	r24, 0xA5	; 165
 24a:	9c e3       	ldi	r25, 0x3C	; 60
 24c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 250:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
			
			break;
 254:	08 95       	ret
			
		case _Timer_Mode_FastPWM:
			
			TCCR1A = 0;
 256:	a0 e8       	ldi	r26, 0x80	; 128
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	1c 92       	st	X, r1
			TCCR1B = 0;
 25c:	e1 e8       	ldi	r30, 0x81	; 129
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	10 82       	st	Z, r1
						
			// Fast PWM
			// Use xx as Top, and use OCR1A to generate waveform
			TCCR1A &= ~( _BV(WGM10) );
 262:	8c 91       	ld	r24, X
 264:	8e 7f       	andi	r24, 0xFE	; 254
 266:	8c 93       	st	X, r24
			//TCCR1A |= _BV(WGM10);
			
			TCCR1A |= _BV(WGM11);
 268:	8c 91       	ld	r24, X
 26a:	82 60       	ori	r24, 0x02	; 2
 26c:	8c 93       	st	X, r24
			//TCCR1A &= ~( _BV(WGM11) );
			
			TCCR1B |= _BV(WGM12);
 26e:	80 81       	ld	r24, Z
 270:	88 60       	ori	r24, 0x08	; 8
 272:	80 83       	st	Z, r24
			
			//TCCR1B &= ~( _BV(WGM13) );
			TCCR1B |= _BV(WGM13);
 274:	80 81       	ld	r24, Z
 276:	80 61       	ori	r24, 0x10	; 16
 278:	80 83       	st	Z, r24
			
			// Non-inverting mode
			//TCCR1A = _BV(COM1A0);
			TCCR1A &= ~( _BV(COM1A0) );
 27a:	8c 91       	ld	r24, X
 27c:	8f 7b       	andi	r24, 0xBF	; 191
 27e:	8c 93       	st	X, r24
			TCCR1A |= _BV(COM1A1);
 280:	8c 91       	ld	r24, X
 282:	80 68       	ori	r24, 0x80	; 128
 284:	8c 93       	st	X, r24
			//TCCR1A &= ~( _BV(COM1A1) );
			TCCR1A |= _BV(COM1B1);
 286:	8c 91       	ld	r24, X
 288:	80 62       	ori	r24, 0x20	; 32
 28a:	8c 93       	st	X, r24
			
			// Define Top to MAX
			ICR1 = 0x1FFF;
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	9f e1       	ldi	r25, 0x1F	; 31
 290:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 294:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
			// 1FFF -> 8191
			
			OCR1A = 125;
 298:	8d e7       	ldi	r24, 0x7D	; 125
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 2a0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
			OCR1B = 125;
 2a4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 2a8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
			
			// 1 prescaler
			TCCR1B |= _BV(CS10);
 2ac:	80 81       	ld	r24, Z
 2ae:	81 60       	ori	r24, 0x01	; 1
 2b0:	80 83       	st	Z, r24
			//TCCR1B &= ~( _BV(CS10) );
			TCCR1B &= ~( _BV(CS11) );
 2b2:	80 81       	ld	r24, Z
 2b4:	8d 7f       	andi	r24, 0xFD	; 253
 2b6:	80 83       	st	Z, r24
			//TCCR1B |= _BV(CS12);
			TCCR1B &= ~( _BV(CS12) );
 2b8:	80 81       	ld	r24, Z
 2ba:	8b 7f       	andi	r24, 0xFB	; 251
 2bc:	80 83       	st	Z, r24
 2be:	08 95       	ret

000002c0 <__fixunssfsi>:
 2c0:	70 d0       	rcall	.+224    	; 0x3a2 <__fp_splitA>
 2c2:	88 f0       	brcs	.+34     	; 0x2e6 <__fixunssfsi+0x26>
 2c4:	9f 57       	subi	r25, 0x7F	; 127
 2c6:	90 f0       	brcs	.+36     	; 0x2ec <__fixunssfsi+0x2c>
 2c8:	b9 2f       	mov	r27, r25
 2ca:	99 27       	eor	r25, r25
 2cc:	b7 51       	subi	r27, 0x17	; 23
 2ce:	a0 f0       	brcs	.+40     	; 0x2f8 <__fixunssfsi+0x38>
 2d0:	d1 f0       	breq	.+52     	; 0x306 <__fixunssfsi+0x46>
 2d2:	66 0f       	add	r22, r22
 2d4:	77 1f       	adc	r23, r23
 2d6:	88 1f       	adc	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	1a f0       	brmi	.+6      	; 0x2e2 <__fixunssfsi+0x22>
 2dc:	ba 95       	dec	r27
 2de:	c9 f7       	brne	.-14     	; 0x2d2 <__fixunssfsi+0x12>
 2e0:	12 c0       	rjmp	.+36     	; 0x306 <__fixunssfsi+0x46>
 2e2:	b1 30       	cpi	r27, 0x01	; 1
 2e4:	81 f0       	breq	.+32     	; 0x306 <__fixunssfsi+0x46>
 2e6:	77 d0       	rcall	.+238    	; 0x3d6 <__fp_zero>
 2e8:	b1 e0       	ldi	r27, 0x01	; 1
 2ea:	08 95       	ret
 2ec:	74 c0       	rjmp	.+232    	; 0x3d6 <__fp_zero>
 2ee:	67 2f       	mov	r22, r23
 2f0:	78 2f       	mov	r23, r24
 2f2:	88 27       	eor	r24, r24
 2f4:	b8 5f       	subi	r27, 0xF8	; 248
 2f6:	39 f0       	breq	.+14     	; 0x306 <__fixunssfsi+0x46>
 2f8:	b9 3f       	cpi	r27, 0xF9	; 249
 2fa:	cc f3       	brlt	.-14     	; 0x2ee <__fixunssfsi+0x2e>
 2fc:	86 95       	lsr	r24
 2fe:	77 95       	ror	r23
 300:	67 95       	ror	r22
 302:	b3 95       	inc	r27
 304:	d9 f7       	brne	.-10     	; 0x2fc <__fixunssfsi+0x3c>
 306:	3e f4       	brtc	.+14     	; 0x316 <__fixunssfsi+0x56>
 308:	90 95       	com	r25
 30a:	80 95       	com	r24
 30c:	70 95       	com	r23
 30e:	61 95       	neg	r22
 310:	7f 4f       	sbci	r23, 0xFF	; 255
 312:	8f 4f       	sbci	r24, 0xFF	; 255
 314:	9f 4f       	sbci	r25, 0xFF	; 255
 316:	08 95       	ret

00000318 <__floatunsisf>:
 318:	e8 94       	clt
 31a:	09 c0       	rjmp	.+18     	; 0x32e <__floatsisf+0x12>

0000031c <__floatsisf>:
 31c:	97 fb       	bst	r25, 7
 31e:	3e f4       	brtc	.+14     	; 0x32e <__floatsisf+0x12>
 320:	90 95       	com	r25
 322:	80 95       	com	r24
 324:	70 95       	com	r23
 326:	61 95       	neg	r22
 328:	7f 4f       	sbci	r23, 0xFF	; 255
 32a:	8f 4f       	sbci	r24, 0xFF	; 255
 32c:	9f 4f       	sbci	r25, 0xFF	; 255
 32e:	99 23       	and	r25, r25
 330:	a9 f0       	breq	.+42     	; 0x35c <__floatsisf+0x40>
 332:	f9 2f       	mov	r31, r25
 334:	96 e9       	ldi	r25, 0x96	; 150
 336:	bb 27       	eor	r27, r27
 338:	93 95       	inc	r25
 33a:	f6 95       	lsr	r31
 33c:	87 95       	ror	r24
 33e:	77 95       	ror	r23
 340:	67 95       	ror	r22
 342:	b7 95       	ror	r27
 344:	f1 11       	cpse	r31, r1
 346:	f8 cf       	rjmp	.-16     	; 0x338 <__floatsisf+0x1c>
 348:	fa f4       	brpl	.+62     	; 0x388 <__floatsisf+0x6c>
 34a:	bb 0f       	add	r27, r27
 34c:	11 f4       	brne	.+4      	; 0x352 <__floatsisf+0x36>
 34e:	60 ff       	sbrs	r22, 0
 350:	1b c0       	rjmp	.+54     	; 0x388 <__floatsisf+0x6c>
 352:	6f 5f       	subi	r22, 0xFF	; 255
 354:	7f 4f       	sbci	r23, 0xFF	; 255
 356:	8f 4f       	sbci	r24, 0xFF	; 255
 358:	9f 4f       	sbci	r25, 0xFF	; 255
 35a:	16 c0       	rjmp	.+44     	; 0x388 <__floatsisf+0x6c>
 35c:	88 23       	and	r24, r24
 35e:	11 f0       	breq	.+4      	; 0x364 <__floatsisf+0x48>
 360:	96 e9       	ldi	r25, 0x96	; 150
 362:	11 c0       	rjmp	.+34     	; 0x386 <__floatsisf+0x6a>
 364:	77 23       	and	r23, r23
 366:	21 f0       	breq	.+8      	; 0x370 <__floatsisf+0x54>
 368:	9e e8       	ldi	r25, 0x8E	; 142
 36a:	87 2f       	mov	r24, r23
 36c:	76 2f       	mov	r23, r22
 36e:	05 c0       	rjmp	.+10     	; 0x37a <__floatsisf+0x5e>
 370:	66 23       	and	r22, r22
 372:	71 f0       	breq	.+28     	; 0x390 <__floatsisf+0x74>
 374:	96 e8       	ldi	r25, 0x86	; 134
 376:	86 2f       	mov	r24, r22
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	2a f0       	brmi	.+10     	; 0x388 <__floatsisf+0x6c>
 37e:	9a 95       	dec	r25
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	88 1f       	adc	r24, r24
 386:	da f7       	brpl	.-10     	; 0x37e <__floatsisf+0x62>
 388:	88 0f       	add	r24, r24
 38a:	96 95       	lsr	r25
 38c:	87 95       	ror	r24
 38e:	97 f9       	bld	r25, 7
 390:	08 95       	ret

00000392 <__fp_split3>:
 392:	57 fd       	sbrc	r21, 7
 394:	90 58       	subi	r25, 0x80	; 128
 396:	44 0f       	add	r20, r20
 398:	55 1f       	adc	r21, r21
 39a:	59 f0       	breq	.+22     	; 0x3b2 <__fp_splitA+0x10>
 39c:	5f 3f       	cpi	r21, 0xFF	; 255
 39e:	71 f0       	breq	.+28     	; 0x3bc <__fp_splitA+0x1a>
 3a0:	47 95       	ror	r20

000003a2 <__fp_splitA>:
 3a2:	88 0f       	add	r24, r24
 3a4:	97 fb       	bst	r25, 7
 3a6:	99 1f       	adc	r25, r25
 3a8:	61 f0       	breq	.+24     	; 0x3c2 <__fp_splitA+0x20>
 3aa:	9f 3f       	cpi	r25, 0xFF	; 255
 3ac:	79 f0       	breq	.+30     	; 0x3cc <__fp_splitA+0x2a>
 3ae:	87 95       	ror	r24
 3b0:	08 95       	ret
 3b2:	12 16       	cp	r1, r18
 3b4:	13 06       	cpc	r1, r19
 3b6:	14 06       	cpc	r1, r20
 3b8:	55 1f       	adc	r21, r21
 3ba:	f2 cf       	rjmp	.-28     	; 0x3a0 <__fp_split3+0xe>
 3bc:	46 95       	lsr	r20
 3be:	f1 df       	rcall	.-30     	; 0x3a2 <__fp_splitA>
 3c0:	08 c0       	rjmp	.+16     	; 0x3d2 <__fp_splitA+0x30>
 3c2:	16 16       	cp	r1, r22
 3c4:	17 06       	cpc	r1, r23
 3c6:	18 06       	cpc	r1, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	f1 cf       	rjmp	.-30     	; 0x3ae <__fp_splitA+0xc>
 3cc:	86 95       	lsr	r24
 3ce:	71 05       	cpc	r23, r1
 3d0:	61 05       	cpc	r22, r1
 3d2:	08 94       	sec
 3d4:	08 95       	ret

000003d6 <__fp_zero>:
 3d6:	e8 94       	clt

000003d8 <__fp_szero>:
 3d8:	bb 27       	eor	r27, r27
 3da:	66 27       	eor	r22, r22
 3dc:	77 27       	eor	r23, r23
 3de:	cb 01       	movw	r24, r22
 3e0:	97 f9       	bld	r25, 7
 3e2:	08 95       	ret

000003e4 <__mulsf3>:
 3e4:	0b d0       	rcall	.+22     	; 0x3fc <__mulsf3x>
 3e6:	78 c0       	rjmp	.+240    	; 0x4d8 <__fp_round>
 3e8:	69 d0       	rcall	.+210    	; 0x4bc <__fp_pscA>
 3ea:	28 f0       	brcs	.+10     	; 0x3f6 <__mulsf3+0x12>
 3ec:	6e d0       	rcall	.+220    	; 0x4ca <__fp_pscB>
 3ee:	18 f0       	brcs	.+6      	; 0x3f6 <__mulsf3+0x12>
 3f0:	95 23       	and	r25, r21
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <__mulsf3+0x12>
 3f4:	5a c0       	rjmp	.+180    	; 0x4aa <__fp_inf>
 3f6:	5f c0       	rjmp	.+190    	; 0x4b6 <__fp_nan>
 3f8:	11 24       	eor	r1, r1
 3fa:	ee cf       	rjmp	.-36     	; 0x3d8 <__fp_szero>

000003fc <__mulsf3x>:
 3fc:	ca df       	rcall	.-108    	; 0x392 <__fp_split3>
 3fe:	a0 f3       	brcs	.-24     	; 0x3e8 <__mulsf3+0x4>

00000400 <__mulsf3_pse>:
 400:	95 9f       	mul	r25, r21
 402:	d1 f3       	breq	.-12     	; 0x3f8 <__mulsf3+0x14>
 404:	95 0f       	add	r25, r21
 406:	50 e0       	ldi	r21, 0x00	; 0
 408:	55 1f       	adc	r21, r21
 40a:	62 9f       	mul	r22, r18
 40c:	f0 01       	movw	r30, r0
 40e:	72 9f       	mul	r23, r18
 410:	bb 27       	eor	r27, r27
 412:	f0 0d       	add	r31, r0
 414:	b1 1d       	adc	r27, r1
 416:	63 9f       	mul	r22, r19
 418:	aa 27       	eor	r26, r26
 41a:	f0 0d       	add	r31, r0
 41c:	b1 1d       	adc	r27, r1
 41e:	aa 1f       	adc	r26, r26
 420:	64 9f       	mul	r22, r20
 422:	66 27       	eor	r22, r22
 424:	b0 0d       	add	r27, r0
 426:	a1 1d       	adc	r26, r1
 428:	66 1f       	adc	r22, r22
 42a:	82 9f       	mul	r24, r18
 42c:	22 27       	eor	r18, r18
 42e:	b0 0d       	add	r27, r0
 430:	a1 1d       	adc	r26, r1
 432:	62 1f       	adc	r22, r18
 434:	73 9f       	mul	r23, r19
 436:	b0 0d       	add	r27, r0
 438:	a1 1d       	adc	r26, r1
 43a:	62 1f       	adc	r22, r18
 43c:	83 9f       	mul	r24, r19
 43e:	a0 0d       	add	r26, r0
 440:	61 1d       	adc	r22, r1
 442:	22 1f       	adc	r18, r18
 444:	74 9f       	mul	r23, r20
 446:	33 27       	eor	r19, r19
 448:	a0 0d       	add	r26, r0
 44a:	61 1d       	adc	r22, r1
 44c:	23 1f       	adc	r18, r19
 44e:	84 9f       	mul	r24, r20
 450:	60 0d       	add	r22, r0
 452:	21 1d       	adc	r18, r1
 454:	82 2f       	mov	r24, r18
 456:	76 2f       	mov	r23, r22
 458:	6a 2f       	mov	r22, r26
 45a:	11 24       	eor	r1, r1
 45c:	9f 57       	subi	r25, 0x7F	; 127
 45e:	50 40       	sbci	r21, 0x00	; 0
 460:	8a f0       	brmi	.+34     	; 0x484 <__mulsf3_pse+0x84>
 462:	e1 f0       	breq	.+56     	; 0x49c <__mulsf3_pse+0x9c>
 464:	88 23       	and	r24, r24
 466:	4a f0       	brmi	.+18     	; 0x47a <__mulsf3_pse+0x7a>
 468:	ee 0f       	add	r30, r30
 46a:	ff 1f       	adc	r31, r31
 46c:	bb 1f       	adc	r27, r27
 46e:	66 1f       	adc	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	88 1f       	adc	r24, r24
 474:	91 50       	subi	r25, 0x01	; 1
 476:	50 40       	sbci	r21, 0x00	; 0
 478:	a9 f7       	brne	.-22     	; 0x464 <__mulsf3_pse+0x64>
 47a:	9e 3f       	cpi	r25, 0xFE	; 254
 47c:	51 05       	cpc	r21, r1
 47e:	70 f0       	brcs	.+28     	; 0x49c <__mulsf3_pse+0x9c>
 480:	14 c0       	rjmp	.+40     	; 0x4aa <__fp_inf>
 482:	aa cf       	rjmp	.-172    	; 0x3d8 <__fp_szero>
 484:	5f 3f       	cpi	r21, 0xFF	; 255
 486:	ec f3       	brlt	.-6      	; 0x482 <__mulsf3_pse+0x82>
 488:	98 3e       	cpi	r25, 0xE8	; 232
 48a:	dc f3       	brlt	.-10     	; 0x482 <__mulsf3_pse+0x82>
 48c:	86 95       	lsr	r24
 48e:	77 95       	ror	r23
 490:	67 95       	ror	r22
 492:	b7 95       	ror	r27
 494:	f7 95       	ror	r31
 496:	e7 95       	ror	r30
 498:	9f 5f       	subi	r25, 0xFF	; 255
 49a:	c1 f7       	brne	.-16     	; 0x48c <__mulsf3_pse+0x8c>
 49c:	fe 2b       	or	r31, r30
 49e:	88 0f       	add	r24, r24
 4a0:	91 1d       	adc	r25, r1
 4a2:	96 95       	lsr	r25
 4a4:	87 95       	ror	r24
 4a6:	97 f9       	bld	r25, 7
 4a8:	08 95       	ret

000004aa <__fp_inf>:
 4aa:	97 f9       	bld	r25, 7
 4ac:	9f 67       	ori	r25, 0x7F	; 127
 4ae:	80 e8       	ldi	r24, 0x80	; 128
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	08 95       	ret

000004b6 <__fp_nan>:
 4b6:	9f ef       	ldi	r25, 0xFF	; 255
 4b8:	80 ec       	ldi	r24, 0xC0	; 192
 4ba:	08 95       	ret

000004bc <__fp_pscA>:
 4bc:	00 24       	eor	r0, r0
 4be:	0a 94       	dec	r0
 4c0:	16 16       	cp	r1, r22
 4c2:	17 06       	cpc	r1, r23
 4c4:	18 06       	cpc	r1, r24
 4c6:	09 06       	cpc	r0, r25
 4c8:	08 95       	ret

000004ca <__fp_pscB>:
 4ca:	00 24       	eor	r0, r0
 4cc:	0a 94       	dec	r0
 4ce:	12 16       	cp	r1, r18
 4d0:	13 06       	cpc	r1, r19
 4d2:	14 06       	cpc	r1, r20
 4d4:	05 06       	cpc	r0, r21
 4d6:	08 95       	ret

000004d8 <__fp_round>:
 4d8:	09 2e       	mov	r0, r25
 4da:	03 94       	inc	r0
 4dc:	00 0c       	add	r0, r0
 4de:	11 f4       	brne	.+4      	; 0x4e4 <__fp_round+0xc>
 4e0:	88 23       	and	r24, r24
 4e2:	52 f0       	brmi	.+20     	; 0x4f8 <__fp_round+0x20>
 4e4:	bb 0f       	add	r27, r27
 4e6:	40 f4       	brcc	.+16     	; 0x4f8 <__fp_round+0x20>
 4e8:	bf 2b       	or	r27, r31
 4ea:	11 f4       	brne	.+4      	; 0x4f0 <__fp_round+0x18>
 4ec:	60 ff       	sbrs	r22, 0
 4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <__fp_round+0x20>
 4f0:	6f 5f       	subi	r22, 0xFF	; 255
 4f2:	7f 4f       	sbci	r23, 0xFF	; 255
 4f4:	8f 4f       	sbci	r24, 0xFF	; 255
 4f6:	9f 4f       	sbci	r25, 0xFF	; 255
 4f8:	08 95       	ret

000004fa <_exit>:
 4fa:	f8 94       	cli

000004fc <__stop_program>:
 4fc:	ff cf       	rjmp	.-2      	; 0x4fc <__stop_program>
