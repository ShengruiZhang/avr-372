
Lab_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  00000782  00000816  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000782  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800218  00800218  0000082e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000082e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000860  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000185c  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000107a  00000000  00000000  00002244  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c15  00000000  00000000  000032be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00003ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079b  00000000  00000000  00004154  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ae  00000000  00000000  000048ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004f9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	10 c1       	rjmp	.+544    	; 0x226 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e8       	ldi	r30, 0x82	; 130
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 31       	cpi	r26, 0x18	; 24
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e1       	ldi	r26, 0x18	; 24
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 32       	cpi	r26, 0x22	; 34
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	2e c3       	rjmp	.+1628   	; 0x77e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
int16_t Data[3] = {65535};
uint8_t Data_raw[6] = {255};

int main(void)
{
	init_timer_1(_Timer_Mode_CTC);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	58 d1       	rcall	.+688    	; 0x3d8 <init_timer_1>
	init_timer_3(_Timer_Mode_FastPWM);
 128:	81 e0       	ldi	r24, 0x01	; 1
	init_button_PD0();
 12a:	a7 d0       	rcall	.+334    	; 0x27a <init_timer_3>
	init_usart();
 12c:	4d d1       	rcall	.+666    	; 0x3c8 <init_button_PD0>
 12e:	cc d1       	rcall	.+920    	; 0x4c8 <init_usart>
	init_SPI_Master();
 130:	0f d1       	rcall	.+542    	; 0x350 <init_SPI_Master>
	sei();
 132:	78 94       	sei
	
	// Sensor: Set range +/- 4Gs
	SPI_Writing(0x31, 0x01);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	81 e3       	ldi	r24, 0x31	; 49
 138:	3e d1       	rcall	.+636    	; 0x3b6 <SPI_Writing>
	
	// Sensor: Enter measuring mode
	SPI_Writing(0x2D, 0x08);
 13a:	68 e0       	ldi	r22, 0x08	; 8
 13c:	8d e2       	ldi	r24, 0x2D	; 45
 13e:	3b d1       	rcall	.+630    	; 0x3b6 <SPI_Writing>
	
	Timer_3_SetWidth(0);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	cb 01       	movw	r24, r22
 146:	f5 d0       	rcall	.+490    	; 0x332 <Timer_3_SetWidth>
    {
		// Get data from sensor
		SPI_Reading_MB(0x32, 6, Data_raw);
		
		// Merge Data
		Data[0] = (Data_raw[1] << 8) | Data_raw[0];
 148:	c6 e0       	ldi	r28, 0x06	; 6
 14a:	d2 e0       	ldi	r29, 0x02	; 2
	Timer_3_SetWidth(0);
	
    while (1) 
    {
		// Get data from sensor
		SPI_Reading_MB(0x32, 6, Data_raw);
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	52 e0       	ldi	r21, 0x02	; 2
 150:	66 e0       	ldi	r22, 0x06	; 6
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	82 e3       	ldi	r24, 0x32	; 50
 156:	10 d1       	rcall	.+544    	; 0x378 <SPI_Reading_MB>
 158:	e0 e0       	ldi	r30, 0x00	; 0
		
		// Merge Data
		Data[0] = (Data_raw[1] << 8) | Data_raw[0];
 15a:	f2 e0       	ldi	r31, 0x02	; 2
 15c:	81 81       	ldd	r24, Z+1	; 0x01
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	98 2f       	mov	r25, r24
 162:	88 27       	eor	r24, r24
 164:	20 81       	ld	r18, Z
 166:	82 2b       	or	r24, r18
 168:	99 83       	std	Y+1, r25	; 0x01
 16a:	88 83       	st	Y, r24
 16c:	83 81       	ldd	r24, Z+3	; 0x03
		Data[1] = (Data_raw[3] << 8) | Data_raw[2];
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	98 2f       	mov	r25, r24
 172:	88 27       	eor	r24, r24
 174:	22 81       	ldd	r18, Z+2	; 0x02
 176:	82 2b       	or	r24, r18
 178:	9b 83       	std	Y+3, r25	; 0x03
 17a:	8a 83       	std	Y+2, r24	; 0x02
 17c:	85 81       	ldd	r24, Z+5	; 0x05
		Data[2] = (Data_raw[5] << 8) | Data_raw[4];
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	98 2f       	mov	r25, r24
 182:	88 27       	eor	r24, r24
 184:	24 81       	ldd	r18, Z+4	; 0x04
 186:	82 2b       	or	r24, r18
 188:	9d 83       	std	Y+5, r25	; 0x05
 18a:	8c 83       	std	Y+4, r24	; 0x04
		
		// Display result
		usart_sendStr2("X: ");
 18c:	8c e0       	ldi	r24, 0x0C	; 12
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	c5 d1       	rcall	.+906    	; 0x51c <usart_sendStr2>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 192:	4a e0       	ldi	r20, 0x0A	; 10
 194:	68 e1       	ldi	r22, 0x18	; 24
 196:	72 e0       	ldi	r23, 0x02	; 2
 198:	88 81       	ld	r24, Y
 19a:	99 81       	ldd	r25, Y+1	; 0x01
 19c:	bd d2       	rcall	.+1402   	; 0x718 <__itoa_ncheck>
		itoa(Data[0], c_buffer, 10);
		usart_sendStrln(c_buffer);
 19e:	88 e1       	ldi	r24, 0x18	; 24
 1a0:	92 e0       	ldi	r25, 0x02	; 2
 1a2:	d6 d1       	rcall	.+940    	; 0x550 <usart_sendStrln>
		
		usart_sendStr2("Y: ");
 1a4:	80 e1       	ldi	r24, 0x10	; 16
 1a6:	92 e0       	ldi	r25, 0x02	; 2
 1a8:	b9 d1       	rcall	.+882    	; 0x51c <usart_sendStr2>
 1aa:	4a e0       	ldi	r20, 0x0A	; 10
 1ac:	68 e1       	ldi	r22, 0x18	; 24
 1ae:	72 e0       	ldi	r23, 0x02	; 2
 1b0:	8a 81       	ldd	r24, Y+2	; 0x02
 1b2:	9b 81       	ldd	r25, Y+3	; 0x03
 1b4:	b1 d2       	rcall	.+1378   	; 0x718 <__itoa_ncheck>
		itoa(Data[1], c_buffer, 10);
		usart_sendStrln(c_buffer);
 1b6:	88 e1       	ldi	r24, 0x18	; 24
 1b8:	92 e0       	ldi	r25, 0x02	; 2
		
		usart_sendStr2("Z: ");
 1ba:	ca d1       	rcall	.+916    	; 0x550 <usart_sendStrln>
 1bc:	84 e1       	ldi	r24, 0x14	; 20
 1be:	92 e0       	ldi	r25, 0x02	; 2
 1c0:	ad d1       	rcall	.+858    	; 0x51c <usart_sendStr2>
 1c2:	4a e0       	ldi	r20, 0x0A	; 10
 1c4:	68 e1       	ldi	r22, 0x18	; 24
 1c6:	72 e0       	ldi	r23, 0x02	; 2
 1c8:	8c 81       	ldd	r24, Y+4	; 0x04
 1ca:	9d 81       	ldd	r25, Y+5	; 0x05
 1cc:	a5 d2       	rcall	.+1354   	; 0x718 <__itoa_ncheck>
 1ce:	88 e1       	ldi	r24, 0x18	; 24
		itoa(Data[2], c_buffer, 10);
		usart_sendStrln(c_buffer);
 1d0:	92 e0       	ldi	r25, 0x02	; 2
 1d2:	be d1       	rcall	.+892    	; 0x550 <usart_sendStrln>
 1d4:	8a e0       	ldi	r24, 0x0A	; 10
 1d6:	9a d1       	rcall	.+820    	; 0x50c <usart_sendChar>
		usart_sendChar('\n');
 1d8:	88 81       	ld	r24, Y
 1da:	99 81       	ldd	r25, Y+1	; 0x01
 1dc:	99 23       	and	r25, r25
		
		/* Compare with threshold value,
			trigger buzzer if exceeded */
		if ( abs(Data[0]) >= ACCEL_THRESHOLD_X ||
 1de:	1c f4       	brge	.+6      	; 0x1e6 <main+0xc2>
 1e0:	91 95       	neg	r25
 1e2:	81 95       	neg	r24
 1e4:	91 09       	sbc	r25, r1
 1e6:	86 39       	cpi	r24, 0x96	; 150
 1e8:	91 05       	cpc	r25, r1
 1ea:	a4 f4       	brge	.+40     	; 0x214 <main+0xf0>
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	9b 81       	ldd	r25, Y+3	; 0x03
 1f0:	99 23       	and	r25, r25
 1f2:	1c f4       	brge	.+6      	; 0x1fa <main+0xd6>
 1f4:	91 95       	neg	r25
 1f6:	81 95       	neg	r24
 1f8:	91 09       	sbc	r25, r1
 1fa:	86 39       	cpi	r24, 0x96	; 150
 1fc:	91 05       	cpc	r25, r1
 1fe:	54 f4       	brge	.+20     	; 0x214 <main+0xf0>
 200:	8c 81       	ldd	r24, Y+4	; 0x04
				abs(Data[1]) >= ACCEL_THRESHOLD_Y ||
 202:	9d 81       	ldd	r25, Y+5	; 0x05
 204:	99 23       	and	r25, r25
 206:	1c f4       	brge	.+6      	; 0x20e <main+0xea>
 208:	91 95       	neg	r25
 20a:	81 95       	neg	r24
 20c:	91 09       	sbc	r25, r1
 20e:	88 3c       	cpi	r24, 0xC8	; 200
 210:	91 05       	cpc	r25, r1
 212:	2c f0       	brlt	.+10     	; 0x21e <main+0xfa>
 214:	6d ec       	ldi	r22, 0xCD	; 205
				abs(Data[2]) >= ACCEL_THRESHOLD_Z )
		{
			Timer_3_SetWidth(0.1);
 216:	7c ec       	ldi	r23, 0xCC	; 204
 218:	8c ec       	ldi	r24, 0xCC	; 204
 21a:	9d e3       	ldi	r25, 0x3D	; 61
 21c:	8a d0       	rcall	.+276    	; 0x332 <Timer_3_SetWidth>
 21e:	88 ee       	ldi	r24, 0xE8	; 232
 220:	93 e0       	ldi	r25, 0x03	; 3
		}
		
		Timer_1_delay_ms(1000);
 222:	24 d1       	rcall	.+584    	; 0x46c <Timer_1_delay_ms>
 224:	93 cf       	rjmp	.-218    	; 0x14c <main+0x28>

00000226 <__vector_1>:
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
    }
 22a:	0f b6       	in	r0, 0x3f	; 63
}

ISR(INT0_vect) {
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	0b b6       	in	r0, 0x3b	; 59
 232:	0f 92       	push	r0
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
 238:	4f 93       	push	r20
 23a:	5f 93       	push	r21
 23c:	6f 93       	push	r22
 23e:	7f 93       	push	r23
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
 244:	af 93       	push	r26
 246:	bf 93       	push	r27
 248:	ef 93       	push	r30
 24a:	ff 93       	push	r31
	// When button is pressed, mute the buzzer
	Timer_3_SetWidth(0);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	cb 01       	movw	r24, r22
 252:	6f d0       	rcall	.+222    	; 0x332 <Timer_3_SetWidth>
 254:	ff 91       	pop	r31
 256:	ef 91       	pop	r30
 258:	bf 91       	pop	r27
 25a:	af 91       	pop	r26
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	7f 91       	pop	r23
 262:	6f 91       	pop	r22
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0b be       	out	0x3b, r0	; 59
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <init_timer_3>:

/*	This Function has been proved to be working */
void init_timer_3(enum TimerMode _mode_timer3) {
	
	// Set OCR3A output
	DDRE |= _BV(DDE3);
 27a:	6b 9a       	sbi	0x0d, 3	; 13
	
	switch(_mode_timer3) {
 27c:	88 23       	and	r24, r24
 27e:	19 f0       	breq	.+6      	; 0x286 <init_timer_3+0xc>
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	11 f1       	breq	.+68     	; 0x2c8 <init_timer_3+0x4e>
 284:	08 95       	ret
		case _Timer_Mode_CTC:
		
		// Toggle OC3A and OC3B on compare match
		TCCR3A = ( _BV(COM3A0) ) | ( _BV(COM3B0) );
 286:	e0 e9       	ldi	r30, 0x90	; 144
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 e5       	ldi	r24, 0x50	; 80
 28c:	80 83       	st	Z, r24
		
		// Timer operates in CTC mode
		TCCR3A &= ~( _BV(WGM30) );
 28e:	80 81       	ld	r24, Z
 290:	8e 7f       	andi	r24, 0xFE	; 254
 292:	80 83       	st	Z, r24
		TCCR3A &= ~( _BV(WGM31) );
 294:	80 81       	ld	r24, Z
 296:	8d 7f       	andi	r24, 0xFD	; 253
 298:	80 83       	st	Z, r24
		TCCR3B = ( _BV(WGM32) );
 29a:	e1 e9       	ldi	r30, 0x91	; 145
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	88 e0       	ldi	r24, 0x08	; 8
 2a0:	80 83       	st	Z, r24
		TCCR3B &= ~( _BV(WGM33) );
 2a2:	80 81       	ld	r24, Z
 2a4:	8f 7e       	andi	r24, 0xEF	; 239
 2a6:	80 83       	st	Z, r24
		
		// 1024 prescaler, timer starts
		TCCR3B |= _BV(CS30);
 2a8:	80 81       	ld	r24, Z
 2aa:	81 60       	ori	r24, 0x01	; 1
 2ac:	80 83       	st	Z, r24
		TCCR3B &= ~( _BV(CS31) );
 2ae:	80 81       	ld	r24, Z
 2b0:	8d 7f       	andi	r24, 0xFD	; 253
 2b2:	80 83       	st	Z, r24
		TCCR3B |= _BV(CS32);
 2b4:	80 81       	ld	r24, Z
 2b6:	84 60       	ori	r24, 0x04	; 4
 2b8:	80 83       	st	Z, r24

		// Set OCR3A, defines the length for OC3A/B
		OCR3A = 15525;
 2ba:	85 ea       	ldi	r24, 0xA5	; 165
 2bc:	9c e3       	ldi	r25, 0x3C	; 60
 2be:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 2c2:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
		
		break;
 2c6:	08 95       	ret
		
		
		case _Timer_Mode_FastPWM:
		
		TCCR3A = 0;
 2c8:	a0 e9       	ldi	r26, 0x90	; 144
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	1c 92       	st	X, r1
		TCCR3B = 0;
 2ce:	e1 e9       	ldi	r30, 0x91	; 145
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	10 82       	st	Z, r1
		
		// Fast PWM
		// Use ICR3 as Top, and use OCR3A to generate waveform
		TCCR3A &= ~( _BV(WGM30) );
 2d4:	8c 91       	ld	r24, X
 2d6:	8e 7f       	andi	r24, 0xFE	; 254
 2d8:	8c 93       	st	X, r24
		//TCCR3A |= _BV(WGM30);
		
		TCCR3A |= _BV(WGM31);
 2da:	8c 91       	ld	r24, X
 2dc:	82 60       	ori	r24, 0x02	; 2
 2de:	8c 93       	st	X, r24
		//TCCR3A &= ~( _BV(WGM31) );
		
		TCCR3B |= _BV(WGM32);
 2e0:	80 81       	ld	r24, Z
 2e2:	88 60       	ori	r24, 0x08	; 8
 2e4:	80 83       	st	Z, r24
		
		//TCCR3B &= ~( _BV(WGM33) );
		TCCR3B |= _BV(WGM33);
 2e6:	80 81       	ld	r24, Z
 2e8:	80 61       	ori	r24, 0x10	; 16
 2ea:	80 83       	st	Z, r24
		
		// Non-inverting mode
		//TCCR3A = _BV(COM3A0);
		TCCR3A &= ~( _BV(COM3A0) );
 2ec:	8c 91       	ld	r24, X
 2ee:	8f 7b       	andi	r24, 0xBF	; 191
 2f0:	8c 93       	st	X, r24
		TCCR3A |= _BV(COM3A1);
 2f2:	8c 91       	ld	r24, X
 2f4:	80 68       	ori	r24, 0x80	; 128
 2f6:	8c 93       	st	X, r24
		//TCCR3A &= ~( _BV(COM3A1) );
		TCCR3A |= _BV(COM3B1);
 2f8:	8c 91       	ld	r24, X
 2fa:	80 62       	ori	r24, 0x20	; 32
 2fc:	8c 93       	st	X, r24
		
		// Define Top to MAX
		ICR3 = Timer3_TOP;
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	9f e1       	ldi	r25, 0x1F	; 31
 302:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 306:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
		// 1FFF -> 8191
		
		OCR3A = 125;
 30a:	8d e7       	ldi	r24, 0x7D	; 125
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 312:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
		OCR3B = 125;
 316:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
 31a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
		
		// 1 prescaler
		TCCR3B |= _BV(CS30);
 31e:	80 81       	ld	r24, Z
 320:	81 60       	ori	r24, 0x01	; 1
 322:	80 83       	st	Z, r24
		//TCCR3B &= ~( _BV(CS30) );
		TCCR3B &= ~( _BV(CS31) );
 324:	80 81       	ld	r24, Z
 326:	8d 7f       	andi	r24, 0xFD	; 253
 328:	80 83       	st	Z, r24
		//TCCR3B |= _BV(CS32);
		TCCR3B &= ~( _BV(CS32) );
 32a:	80 81       	ld	r24, Z
 32c:	8b 7f       	andi	r24, 0xFB	; 251
 32e:	80 83       	st	Z, r24
 330:	08 95       	ret

00000332 <Timer_3_SetWidth>:
		break;
	}
}

void Timer_3_SetWidth(float _Width_timer3) {
	OCR3A = Timer3_TOP * ( _Width_timer3 );
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	38 ef       	ldi	r19, 0xF8	; 248
 336:	4f ef       	ldi	r20, 0xFF	; 255
 338:	55 e4       	ldi	r21, 0x45	; 69
 33a:	63 d1       	rcall	.+710    	; 0x602 <__mulsf3>
 33c:	0d d1       	rcall	.+538    	; 0x558 <__fixunssfsi>
 33e:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 342:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	OCR3B = Timer3_TOP * ( _Width_timer3 );
 346:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
 34a:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
 34e:	08 95       	ret

00000350 <init_SPI_Master>:
	// Pull SS high to release
	SPI_PORT |= _BV(SPI_PIN_SS);
	
	// Return 2 byte of data, 16-bit
	return (_temp[1] << 8 | _temp[0]);
}
 350:	e4 e6       	ldi	r30, 0x64	; 100
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	8b 7f       	andi	r24, 0xFB	; 251
 358:	80 83       	st	Z, r24
 35a:	20 9a       	sbi	0x04, 0	; 4
 35c:	28 9a       	sbi	0x05, 0	; 5
 35e:	21 9a       	sbi	0x04, 1	; 4
 360:	22 9a       	sbi	0x04, 2	; 4
 362:	8f e5       	ldi	r24, 0x5F	; 95
 364:	8c bd       	out	0x2c, r24	; 44
 366:	8d b5       	in	r24, 0x2d	; 45
 368:	8e b5       	in	r24, 0x2e	; 46
 36a:	08 95       	ret

0000036c <SPI_transfer>:
 36c:	8e bd       	out	0x2e, r24	; 46
 36e:	0d b4       	in	r0, 0x2d	; 45
 370:	07 fe       	sbrs	r0, 7
 372:	fd cf       	rjmp	.-6      	; 0x36e <SPI_transfer+0x2>
 374:	8e b5       	in	r24, 0x2e	; 46
 376:	08 95       	ret

00000378 <SPI_Reading_MB>:

void SPI_Reading_MB(uint8_t _addr, uint _num, uint8_t _buf[]) {
 378:	ef 92       	push	r14
 37a:	ff 92       	push	r15
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	8b 01       	movw	r16, r22
 386:	7a 01       	movw	r14, r20
	// Set R, MB bit
	_addr |= SPI_READ;
	_addr |= SPI_RW_MB;
	
	// Pull SS low to select slave
	SPI_PORT &= ~_BV(SPI_PIN_SS);
 388:	28 98       	cbi	0x05, 0	; 5
	
	// Set addr of first byte
	SPI_transfer(_addr);
 38a:	80 6c       	ori	r24, 0xC0	; 192
 38c:	ef df       	rcall	.-34     	; 0x36c <SPI_transfer>
	
	for (uint i = 0; i < _num; ++i)
 38e:	01 15       	cp	r16, r1
 390:	11 05       	cpc	r17, r1
 392:	49 f0       	breq	.+18     	; 0x3a6 <SPI_Reading_MB+0x2e>
 394:	e7 01       	movw	r28, r14
 396:	0e 0d       	add	r16, r14
 398:	1f 1d       	adc	r17, r15
	{
		_buf[i] = SPI_transfer(0x00);
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	e7 df       	rcall	.-50     	; 0x36c <SPI_transfer>
 39e:	89 93       	st	Y+, r24
	SPI_PORT &= ~_BV(SPI_PIN_SS);
	
	// Set addr of first byte
	SPI_transfer(_addr);
	
	for (uint i = 0; i < _num; ++i)
 3a0:	c0 17       	cp	r28, r16
 3a2:	d1 07       	cpc	r29, r17
 3a4:	d1 f7       	brne	.-12     	; 0x39a <SPI_Reading_MB+0x22>
	{
		_buf[i] = SPI_transfer(0x00);
	}
	// Pull SS high to free bus
	SPI_PORT |= _BV(SPI_PIN_SS);
 3a6:	28 9a       	sbi	0x05, 0	; 5
}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	0f 91       	pop	r16
 3b0:	ff 90       	pop	r15
 3b2:	ef 90       	pop	r14
 3b4:	08 95       	ret

000003b6 <SPI_Writing>:

/* SPI Writing, write 1 byte at a time
	Data sent by slave is ignored during writing */
void SPI_Writing(uint8_t _addr, uint8_t _data) {
 3b6:	cf 93       	push	r28
 3b8:	c6 2f       	mov	r28, r22
	
	// Pull SS low to select slave
	SPI_PORT &= ~_BV(SPI_PIN_SS);
 3ba:	28 98       	cbi	0x05, 0	; 5
	
	SPI_transfer(_addr);	// Tell slave the addr to write
 3bc:	d7 df       	rcall	.-82     	; 0x36c <SPI_transfer>
	SPI_transfer(_data);	// Write the data
 3be:	8c 2f       	mov	r24, r28
 3c0:	d5 df       	rcall	.-86     	; 0x36c <SPI_transfer>
	
	// Pull SS high to free bus
	SPI_PORT |= _BV(SPI_PIN_SS);
 3c2:	28 9a       	sbi	0x05, 0	; 5
}
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <init_button_PD0>:
	PCMSK0 |= 1 << PCINT4;
}

void init_button_PD0() {
	 // PB7 as button indicator
	 DDRB |= 1 << DDB7;
 3c8:	27 9a       	sbi	0x04, 7	; 4
	 
	 // PD0 (INT0) as button input
	 DDRD |= 1 << DDD0;
 3ca:	50 9a       	sbi	0x0a, 0	; 10
	 
	 // enable internal pull-up
	 PORTD |= 1 << PD0;
 3cc:	58 9a       	sbi	0x0b, 0	; 11
	 
	 // low level on the pin generates interrupt
	 EICRA = 0;
 3ce:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	 
	 // enable external interrupt (INT)
	 EIMSK |= 1 << INT0;
 3d2:	e8 9a       	sbi	0x1d, 0	; 29
	 
	 // clear interrupt flag
	 EIFR |= 1 << INTF0;
 3d4:	e0 9a       	sbi	0x1c, 0	; 28
 3d6:	08 95       	ret

000003d8 <init_timer_1>:
	}
	
	// Stop Timer
	TCCR0B &= ~_BV(CS02);
	TCCR0B &= ~_BV(CS01);
	TCCR0B &= ~_BV(CS00);
 3d8:	88 23       	and	r24, r24
 3da:	19 f0       	breq	.+6      	; 0x3e2 <init_timer_1+0xa>
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	d1 f0       	breq	.+52     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3e0:	08 95       	ret
 3e2:	e0 e8       	ldi	r30, 0x80	; 128
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	8f 77       	andi	r24, 0x7F	; 127
 3ea:	80 83       	st	Z, r24
 3ec:	80 81       	ld	r24, Z
 3ee:	8e 7f       	andi	r24, 0xFE	; 254
 3f0:	80 83       	st	Z, r24
 3f2:	80 81       	ld	r24, Z
 3f4:	8d 7f       	andi	r24, 0xFD	; 253
 3f6:	80 83       	st	Z, r24
 3f8:	e1 e8       	ldi	r30, 0x81	; 129
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	88 e0       	ldi	r24, 0x08	; 8
 3fe:	80 83       	st	Z, r24
 400:	80 81       	ld	r24, Z
 402:	8f 7e       	andi	r24, 0xEF	; 239
 404:	80 83       	st	Z, r24
 406:	80 e8       	ldi	r24, 0x80	; 128
 408:	9e e3       	ldi	r25, 0x3E	; 62
 40a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 40e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 412:	08 95       	ret
 414:	e0 e8       	ldi	r30, 0x80	; 128
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	10 82       	st	Z, r1
 41a:	a1 e8       	ldi	r26, 0x81	; 129
 41c:	b0 e0       	ldi	r27, 0x00	; 0
 41e:	1c 92       	st	X, r1
 420:	80 81       	ld	r24, Z
 422:	8e 7f       	andi	r24, 0xFE	; 254
 424:	80 83       	st	Z, r24
 426:	80 81       	ld	r24, Z
 428:	82 60       	ori	r24, 0x02	; 2
 42a:	80 83       	st	Z, r24
 42c:	8c 91       	ld	r24, X
 42e:	88 60       	ori	r24, 0x08	; 8
 430:	8c 93       	st	X, r24
 432:	8c 91       	ld	r24, X
 434:	80 61       	ori	r24, 0x10	; 16
 436:	8c 93       	st	X, r24
 438:	80 81       	ld	r24, Z
 43a:	8f 7b       	andi	r24, 0xBF	; 191
 43c:	80 83       	st	Z, r24
 43e:	80 81       	ld	r24, Z
 440:	80 68       	ori	r24, 0x80	; 128
 442:	80 83       	st	Z, r24
 444:	80 81       	ld	r24, Z
 446:	80 62       	ori	r24, 0x20	; 32
 448:	80 83       	st	Z, r24
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	9f e1       	ldi	r25, 0x1F	; 31
 44e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 452:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
 456:	8d e7       	ldi	r24, 0x7D	; 125
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 45e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 462:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 466:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
 46a:	08 95       	ret

0000046c <Timer_1_delay_ms>:

/*	This Function has been proved to be working */
void Timer_1_delay_ms(uint16_t _Lenght_timer1) {
	
	// Clear match flag
	TIFR1 |= _BV(OCF1A);
 46c:	b1 9a       	sbi	0x16, 1	; 22
	
	OCR1A = 16000;
 46e:	20 e8       	ldi	r18, 0x80	; 128
 470:	3e e3       	ldi	r19, 0x3E	; 62
 472:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 476:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	
	// Clear counter
	TCNT1 = 0;
 47a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 47e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	
	// Start Timer, 1 prescaler
	TCCR1B &= ~_BV(CS12);
 482:	e1 e8       	ldi	r30, 0x81	; 129
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	20 81       	ld	r18, Z
 488:	2b 7f       	andi	r18, 0xFB	; 251
 48a:	20 83       	st	Z, r18
	TCCR1B &= ~_BV(CS11);
 48c:	20 81       	ld	r18, Z
 48e:	2d 7f       	andi	r18, 0xFD	; 253
 490:	20 83       	st	Z, r18
	TCCR1B |= _BV(CS10);
 492:	20 81       	ld	r18, Z
 494:	21 60       	ori	r18, 0x01	; 1
 496:	20 83       	st	Z, r18
	
	for (uint16_t _aux = 1; _aux <= _Lenght_timer1; ++_aux) {
 498:	00 97       	sbiw	r24, 0x00	; 0
 49a:	51 f0       	breq	.+20     	; 0x4b0 <Timer_1_delay_ms+0x44>
 49c:	21 e0       	ldi	r18, 0x01	; 1
 49e:	30 e0       	ldi	r19, 0x00	; 0
		// Wait for 1 match occur, Resolution: 1 ms
		while ( !(TIFR1 & (1 << OCF1A)) );
 4a0:	b1 9b       	sbis	0x16, 1	; 22
 4a2:	fe cf       	rjmp	.-4      	; 0x4a0 <Timer_1_delay_ms+0x34>
		TIFR1 |= _BV(OCF1A);
 4a4:	b1 9a       	sbi	0x16, 1	; 22
	// Start Timer, 1 prescaler
	TCCR1B &= ~_BV(CS12);
	TCCR1B &= ~_BV(CS11);
	TCCR1B |= _BV(CS10);
	
	for (uint16_t _aux = 1; _aux <= _Lenght_timer1; ++_aux) {
 4a6:	2f 5f       	subi	r18, 0xFF	; 255
 4a8:	3f 4f       	sbci	r19, 0xFF	; 255
 4aa:	82 17       	cp	r24, r18
 4ac:	93 07       	cpc	r25, r19
 4ae:	c0 f7       	brcc	.-16     	; 0x4a0 <Timer_1_delay_ms+0x34>
		while ( !(TIFR1 & (1 << OCF1A)) );
		TIFR1 |= _BV(OCF1A);
	}
	
	// Stop Timer
	TCCR1B &= ~_BV(CS12);
 4b0:	e1 e8       	ldi	r30, 0x81	; 129
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	8b 7f       	andi	r24, 0xFB	; 251
 4b8:	80 83       	st	Z, r24
	TCCR1B &= ~_BV(CS11);
 4ba:	80 81       	ld	r24, Z
 4bc:	8d 7f       	andi	r24, 0xFD	; 253
 4be:	80 83       	st	Z, r24
	TCCR1B &= ~_BV(CS10);
 4c0:	80 81       	ld	r24, Z
 4c2:	8e 7f       	andi	r24, 0xFE	; 254
 4c4:	80 83       	st	Z, r24
 4c6:	08 95       	ret

000004c8 <init_usart>:
	while ( (temp=_string[char_index])!=0 ){
		while(!(UCSR0A&(1<<UDRE0)));   // until UDR0 is empty
		UDR0 = temp;
		++char_index;	// move to next char
	}
}
 4c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 4cc:	87 e6       	ldi	r24, 0x67	; 103
 4ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 4d2:	e1 ec       	ldi	r30, 0xC1	; 193
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	80 81       	ld	r24, Z
 4d8:	88 60       	ori	r24, 0x08	; 8
 4da:	80 83       	st	Z, r24
 4dc:	80 81       	ld	r24, Z
 4de:	8f 7b       	andi	r24, 0xBF	; 191
 4e0:	80 83       	st	Z, r24
 4e2:	e2 ec       	ldi	r30, 0xC2	; 194
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	80 81       	ld	r24, Z
 4e8:	8f 77       	andi	r24, 0x7F	; 127
 4ea:	80 83       	st	Z, r24
 4ec:	80 81       	ld	r24, Z
 4ee:	8f 7b       	andi	r24, 0xBF	; 191
 4f0:	80 83       	st	Z, r24
 4f2:	80 81       	ld	r24, Z
 4f4:	8f 7d       	andi	r24, 0xDF	; 223
 4f6:	80 83       	st	Z, r24
 4f8:	80 81       	ld	r24, Z
 4fa:	8f 7e       	andi	r24, 0xEF	; 239
 4fc:	80 83       	st	Z, r24
 4fe:	80 81       	ld	r24, Z
 500:	87 7f       	andi	r24, 0xF7	; 247
 502:	80 83       	st	Z, r24
 504:	80 81       	ld	r24, Z
 506:	86 60       	ori	r24, 0x06	; 6
 508:	80 83       	st	Z, r24
 50a:	08 95       	ret

0000050c <usart_sendChar>:
 50c:	e0 ec       	ldi	r30, 0xC0	; 192
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	90 81       	ld	r25, Z
 512:	95 ff       	sbrs	r25, 5
 514:	fd cf       	rjmp	.-6      	; 0x510 <usart_sendChar+0x4>
 516:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 51a:	08 95       	ret

0000051c <usart_sendStr2>:

// use pointer pass string and send string to USART
void usart_sendStr2(char *_string) {
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	ec 01       	movw	r28, r24
	uint8_t char_index = 0;
	while ( _string[char_index] != 0 ){
 522:	28 81       	ld	r18, Y
 524:	22 23       	and	r18, r18
 526:	89 f0       	breq	.+34     	; 0x54a <usart_sendStr2+0x2e>
 528:	30 e0       	ldi	r19, 0x00	; 0
		while(!(UCSR0A & _BV(UDRE0)));  // until UDR0 is empty 
 52a:	e0 ec       	ldi	r30, 0xC0	; 192
 52c:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = _string[char_index];
 52e:	46 ec       	ldi	r20, 0xC6	; 198
 530:	50 e0       	ldi	r21, 0x00	; 0

// use pointer pass string and send string to USART
void usart_sendStr2(char *_string) {
	uint8_t char_index = 0;
	while ( _string[char_index] != 0 ){
		while(!(UCSR0A & _BV(UDRE0)));  // until UDR0 is empty 
 532:	90 81       	ld	r25, Z
 534:	95 ff       	sbrs	r25, 5
 536:	fd cf       	rjmp	.-6      	; 0x532 <usart_sendStr2+0x16>
		UDR0 = _string[char_index];
 538:	da 01       	movw	r26, r20
 53a:	2c 93       	st	X, r18
		++char_index;	// move to next char
 53c:	3f 5f       	subi	r19, 0xFF	; 255
}

// use pointer pass string and send string to USART
void usart_sendStr2(char *_string) {
	uint8_t char_index = 0;
	while ( _string[char_index] != 0 ){
 53e:	de 01       	movw	r26, r28
 540:	a3 0f       	add	r26, r19
 542:	b1 1d       	adc	r27, r1
 544:	2c 91       	ld	r18, X
 546:	21 11       	cpse	r18, r1
 548:	f4 cf       	rjmp	.-24     	; 0x532 <usart_sendStr2+0x16>
		while(!(UCSR0A & _BV(UDRE0)));  // until UDR0 is empty 
		UDR0 = _string[char_index];
		++char_index;	// move to next char
	}
}
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <usart_sendStrln>:

// Same as sendStr2, plus newline
void usart_sendStrln(char *_string) {
	usart_sendStr2(_string);
 550:	e5 df       	rcall	.-54     	; 0x51c <usart_sendStr2>
	usart_sendChar('\n');
 552:	8a e0       	ldi	r24, 0x0A	; 10
 554:	db cf       	rjmp	.-74     	; 0x50c <usart_sendChar>
 556:	08 95       	ret

00000558 <__fixunssfsi>:
 558:	33 d0       	rcall	.+102    	; 0x5c0 <__fp_splitA>
 55a:	88 f0       	brcs	.+34     	; 0x57e <__fixunssfsi+0x26>
 55c:	9f 57       	subi	r25, 0x7F	; 127
 55e:	90 f0       	brcs	.+36     	; 0x584 <__fixunssfsi+0x2c>
 560:	b9 2f       	mov	r27, r25
 562:	99 27       	eor	r25, r25
 564:	b7 51       	subi	r27, 0x17	; 23
 566:	a0 f0       	brcs	.+40     	; 0x590 <__fixunssfsi+0x38>
 568:	d1 f0       	breq	.+52     	; 0x59e <__fixunssfsi+0x46>
 56a:	66 0f       	add	r22, r22
 56c:	77 1f       	adc	r23, r23
 56e:	88 1f       	adc	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	1a f0       	brmi	.+6      	; 0x57a <__fixunssfsi+0x22>
 574:	ba 95       	dec	r27
 576:	c9 f7       	brne	.-14     	; 0x56a <__fixunssfsi+0x12>
 578:	12 c0       	rjmp	.+36     	; 0x59e <__fixunssfsi+0x46>
 57a:	b1 30       	cpi	r27, 0x01	; 1
 57c:	81 f0       	breq	.+32     	; 0x59e <__fixunssfsi+0x46>
 57e:	3a d0       	rcall	.+116    	; 0x5f4 <__fp_zero>
 580:	b1 e0       	ldi	r27, 0x01	; 1
 582:	08 95       	ret
 584:	37 c0       	rjmp	.+110    	; 0x5f4 <__fp_zero>
 586:	67 2f       	mov	r22, r23
 588:	78 2f       	mov	r23, r24
 58a:	88 27       	eor	r24, r24
 58c:	b8 5f       	subi	r27, 0xF8	; 248
 58e:	39 f0       	breq	.+14     	; 0x59e <__fixunssfsi+0x46>
 590:	b9 3f       	cpi	r27, 0xF9	; 249
 592:	cc f3       	brlt	.-14     	; 0x586 <__fixunssfsi+0x2e>
 594:	86 95       	lsr	r24
 596:	77 95       	ror	r23
 598:	67 95       	ror	r22
 59a:	b3 95       	inc	r27
 59c:	d9 f7       	brne	.-10     	; 0x594 <__fixunssfsi+0x3c>
 59e:	3e f4       	brtc	.+14     	; 0x5ae <__fixunssfsi+0x56>
 5a0:	90 95       	com	r25
 5a2:	80 95       	com	r24
 5a4:	70 95       	com	r23
 5a6:	61 95       	neg	r22
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255
 5aa:	8f 4f       	sbci	r24, 0xFF	; 255
 5ac:	9f 4f       	sbci	r25, 0xFF	; 255
 5ae:	08 95       	ret

000005b0 <__fp_split3>:
 5b0:	57 fd       	sbrc	r21, 7
 5b2:	90 58       	subi	r25, 0x80	; 128
 5b4:	44 0f       	add	r20, r20
 5b6:	55 1f       	adc	r21, r21
 5b8:	59 f0       	breq	.+22     	; 0x5d0 <__fp_splitA+0x10>
 5ba:	5f 3f       	cpi	r21, 0xFF	; 255
 5bc:	71 f0       	breq	.+28     	; 0x5da <__fp_splitA+0x1a>
 5be:	47 95       	ror	r20

000005c0 <__fp_splitA>:
 5c0:	88 0f       	add	r24, r24
 5c2:	97 fb       	bst	r25, 7
 5c4:	99 1f       	adc	r25, r25
 5c6:	61 f0       	breq	.+24     	; 0x5e0 <__fp_splitA+0x20>
 5c8:	9f 3f       	cpi	r25, 0xFF	; 255
 5ca:	79 f0       	breq	.+30     	; 0x5ea <__fp_splitA+0x2a>
 5cc:	87 95       	ror	r24
 5ce:	08 95       	ret
 5d0:	12 16       	cp	r1, r18
 5d2:	13 06       	cpc	r1, r19
 5d4:	14 06       	cpc	r1, r20
 5d6:	55 1f       	adc	r21, r21
 5d8:	f2 cf       	rjmp	.-28     	; 0x5be <__fp_split3+0xe>
 5da:	46 95       	lsr	r20
 5dc:	f1 df       	rcall	.-30     	; 0x5c0 <__fp_splitA>
 5de:	08 c0       	rjmp	.+16     	; 0x5f0 <__fp_splitA+0x30>
 5e0:	16 16       	cp	r1, r22
 5e2:	17 06       	cpc	r1, r23
 5e4:	18 06       	cpc	r1, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	f1 cf       	rjmp	.-30     	; 0x5cc <__fp_splitA+0xc>
 5ea:	86 95       	lsr	r24
 5ec:	71 05       	cpc	r23, r1
 5ee:	61 05       	cpc	r22, r1
 5f0:	08 94       	sec
 5f2:	08 95       	ret

000005f4 <__fp_zero>:
 5f4:	e8 94       	clt

000005f6 <__fp_szero>:
 5f6:	bb 27       	eor	r27, r27
 5f8:	66 27       	eor	r22, r22
 5fa:	77 27       	eor	r23, r23
 5fc:	cb 01       	movw	r24, r22
 5fe:	97 f9       	bld	r25, 7
 600:	08 95       	ret

00000602 <__mulsf3>:
 602:	0b d0       	rcall	.+22     	; 0x61a <__mulsf3x>
 604:	78 c0       	rjmp	.+240    	; 0x6f6 <__fp_round>
 606:	69 d0       	rcall	.+210    	; 0x6da <__fp_pscA>
 608:	28 f0       	brcs	.+10     	; 0x614 <__mulsf3+0x12>
 60a:	6e d0       	rcall	.+220    	; 0x6e8 <__fp_pscB>
 60c:	18 f0       	brcs	.+6      	; 0x614 <__mulsf3+0x12>
 60e:	95 23       	and	r25, r21
 610:	09 f0       	breq	.+2      	; 0x614 <__mulsf3+0x12>
 612:	5a c0       	rjmp	.+180    	; 0x6c8 <__fp_inf>
 614:	5f c0       	rjmp	.+190    	; 0x6d4 <__fp_nan>
 616:	11 24       	eor	r1, r1
 618:	ee cf       	rjmp	.-36     	; 0x5f6 <__fp_szero>

0000061a <__mulsf3x>:
 61a:	ca df       	rcall	.-108    	; 0x5b0 <__fp_split3>
 61c:	a0 f3       	brcs	.-24     	; 0x606 <__mulsf3+0x4>

0000061e <__mulsf3_pse>:
 61e:	95 9f       	mul	r25, r21
 620:	d1 f3       	breq	.-12     	; 0x616 <__mulsf3+0x14>
 622:	95 0f       	add	r25, r21
 624:	50 e0       	ldi	r21, 0x00	; 0
 626:	55 1f       	adc	r21, r21
 628:	62 9f       	mul	r22, r18
 62a:	f0 01       	movw	r30, r0
 62c:	72 9f       	mul	r23, r18
 62e:	bb 27       	eor	r27, r27
 630:	f0 0d       	add	r31, r0
 632:	b1 1d       	adc	r27, r1
 634:	63 9f       	mul	r22, r19
 636:	aa 27       	eor	r26, r26
 638:	f0 0d       	add	r31, r0
 63a:	b1 1d       	adc	r27, r1
 63c:	aa 1f       	adc	r26, r26
 63e:	64 9f       	mul	r22, r20
 640:	66 27       	eor	r22, r22
 642:	b0 0d       	add	r27, r0
 644:	a1 1d       	adc	r26, r1
 646:	66 1f       	adc	r22, r22
 648:	82 9f       	mul	r24, r18
 64a:	22 27       	eor	r18, r18
 64c:	b0 0d       	add	r27, r0
 64e:	a1 1d       	adc	r26, r1
 650:	62 1f       	adc	r22, r18
 652:	73 9f       	mul	r23, r19
 654:	b0 0d       	add	r27, r0
 656:	a1 1d       	adc	r26, r1
 658:	62 1f       	adc	r22, r18
 65a:	83 9f       	mul	r24, r19
 65c:	a0 0d       	add	r26, r0
 65e:	61 1d       	adc	r22, r1
 660:	22 1f       	adc	r18, r18
 662:	74 9f       	mul	r23, r20
 664:	33 27       	eor	r19, r19
 666:	a0 0d       	add	r26, r0
 668:	61 1d       	adc	r22, r1
 66a:	23 1f       	adc	r18, r19
 66c:	84 9f       	mul	r24, r20
 66e:	60 0d       	add	r22, r0
 670:	21 1d       	adc	r18, r1
 672:	82 2f       	mov	r24, r18
 674:	76 2f       	mov	r23, r22
 676:	6a 2f       	mov	r22, r26
 678:	11 24       	eor	r1, r1
 67a:	9f 57       	subi	r25, 0x7F	; 127
 67c:	50 40       	sbci	r21, 0x00	; 0
 67e:	8a f0       	brmi	.+34     	; 0x6a2 <__mulsf3_pse+0x84>
 680:	e1 f0       	breq	.+56     	; 0x6ba <__mulsf3_pse+0x9c>
 682:	88 23       	and	r24, r24
 684:	4a f0       	brmi	.+18     	; 0x698 <__mulsf3_pse+0x7a>
 686:	ee 0f       	add	r30, r30
 688:	ff 1f       	adc	r31, r31
 68a:	bb 1f       	adc	r27, r27
 68c:	66 1f       	adc	r22, r22
 68e:	77 1f       	adc	r23, r23
 690:	88 1f       	adc	r24, r24
 692:	91 50       	subi	r25, 0x01	; 1
 694:	50 40       	sbci	r21, 0x00	; 0
 696:	a9 f7       	brne	.-22     	; 0x682 <__mulsf3_pse+0x64>
 698:	9e 3f       	cpi	r25, 0xFE	; 254
 69a:	51 05       	cpc	r21, r1
 69c:	70 f0       	brcs	.+28     	; 0x6ba <__mulsf3_pse+0x9c>
 69e:	14 c0       	rjmp	.+40     	; 0x6c8 <__fp_inf>
 6a0:	aa cf       	rjmp	.-172    	; 0x5f6 <__fp_szero>
 6a2:	5f 3f       	cpi	r21, 0xFF	; 255
 6a4:	ec f3       	brlt	.-6      	; 0x6a0 <__mulsf3_pse+0x82>
 6a6:	98 3e       	cpi	r25, 0xE8	; 232
 6a8:	dc f3       	brlt	.-10     	; 0x6a0 <__mulsf3_pse+0x82>
 6aa:	86 95       	lsr	r24
 6ac:	77 95       	ror	r23
 6ae:	67 95       	ror	r22
 6b0:	b7 95       	ror	r27
 6b2:	f7 95       	ror	r31
 6b4:	e7 95       	ror	r30
 6b6:	9f 5f       	subi	r25, 0xFF	; 255
 6b8:	c1 f7       	brne	.-16     	; 0x6aa <__mulsf3_pse+0x8c>
 6ba:	fe 2b       	or	r31, r30
 6bc:	88 0f       	add	r24, r24
 6be:	91 1d       	adc	r25, r1
 6c0:	96 95       	lsr	r25
 6c2:	87 95       	ror	r24
 6c4:	97 f9       	bld	r25, 7
 6c6:	08 95       	ret

000006c8 <__fp_inf>:
 6c8:	97 f9       	bld	r25, 7
 6ca:	9f 67       	ori	r25, 0x7F	; 127
 6cc:	80 e8       	ldi	r24, 0x80	; 128
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	08 95       	ret

000006d4 <__fp_nan>:
 6d4:	9f ef       	ldi	r25, 0xFF	; 255
 6d6:	80 ec       	ldi	r24, 0xC0	; 192
 6d8:	08 95       	ret

000006da <__fp_pscA>:
 6da:	00 24       	eor	r0, r0
 6dc:	0a 94       	dec	r0
 6de:	16 16       	cp	r1, r22
 6e0:	17 06       	cpc	r1, r23
 6e2:	18 06       	cpc	r1, r24
 6e4:	09 06       	cpc	r0, r25
 6e6:	08 95       	ret

000006e8 <__fp_pscB>:
 6e8:	00 24       	eor	r0, r0
 6ea:	0a 94       	dec	r0
 6ec:	12 16       	cp	r1, r18
 6ee:	13 06       	cpc	r1, r19
 6f0:	14 06       	cpc	r1, r20
 6f2:	05 06       	cpc	r0, r21
 6f4:	08 95       	ret

000006f6 <__fp_round>:
 6f6:	09 2e       	mov	r0, r25
 6f8:	03 94       	inc	r0
 6fa:	00 0c       	add	r0, r0
 6fc:	11 f4       	brne	.+4      	; 0x702 <__fp_round+0xc>
 6fe:	88 23       	and	r24, r24
 700:	52 f0       	brmi	.+20     	; 0x716 <__fp_round+0x20>
 702:	bb 0f       	add	r27, r27
 704:	40 f4       	brcc	.+16     	; 0x716 <__fp_round+0x20>
 706:	bf 2b       	or	r27, r31
 708:	11 f4       	brne	.+4      	; 0x70e <__fp_round+0x18>
 70a:	60 ff       	sbrs	r22, 0
 70c:	04 c0       	rjmp	.+8      	; 0x716 <__fp_round+0x20>
 70e:	6f 5f       	subi	r22, 0xFF	; 255
 710:	7f 4f       	sbci	r23, 0xFF	; 255
 712:	8f 4f       	sbci	r24, 0xFF	; 255
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	08 95       	ret

00000718 <__itoa_ncheck>:
 718:	bb 27       	eor	r27, r27
 71a:	4a 30       	cpi	r20, 0x0A	; 10
 71c:	31 f4       	brne	.+12     	; 0x72a <__itoa_ncheck+0x12>
 71e:	99 23       	and	r25, r25
 720:	22 f4       	brpl	.+8      	; 0x72a <__itoa_ncheck+0x12>
 722:	bd e2       	ldi	r27, 0x2D	; 45
 724:	90 95       	com	r25
 726:	81 95       	neg	r24
 728:	9f 4f       	sbci	r25, 0xFF	; 255
 72a:	01 c0       	rjmp	.+2      	; 0x72e <__utoa_common>

0000072c <__utoa_ncheck>:
 72c:	bb 27       	eor	r27, r27

0000072e <__utoa_common>:
 72e:	fb 01       	movw	r30, r22
 730:	55 27       	eor	r21, r21
 732:	aa 27       	eor	r26, r26
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	aa 1f       	adc	r26, r26
 73a:	a4 17       	cp	r26, r20
 73c:	10 f0       	brcs	.+4      	; 0x742 <__utoa_common+0x14>
 73e:	a4 1b       	sub	r26, r20
 740:	83 95       	inc	r24
 742:	50 51       	subi	r21, 0x10	; 16
 744:	b9 f7       	brne	.-18     	; 0x734 <__utoa_common+0x6>
 746:	a0 5d       	subi	r26, 0xD0	; 208
 748:	aa 33       	cpi	r26, 0x3A	; 58
 74a:	08 f0       	brcs	.+2      	; 0x74e <__utoa_common+0x20>
 74c:	a9 5d       	subi	r26, 0xD9	; 217
 74e:	a1 93       	st	Z+, r26
 750:	00 97       	sbiw	r24, 0x00	; 0
 752:	79 f7       	brne	.-34     	; 0x732 <__utoa_common+0x4>
 754:	b1 11       	cpse	r27, r1
 756:	b1 93       	st	Z+, r27
 758:	11 92       	st	Z+, r1
 75a:	cb 01       	movw	r24, r22
 75c:	00 c0       	rjmp	.+0      	; 0x75e <strrev>

0000075e <strrev>:
 75e:	dc 01       	movw	r26, r24
 760:	fc 01       	movw	r30, r24
 762:	67 2f       	mov	r22, r23
 764:	71 91       	ld	r23, Z+
 766:	77 23       	and	r23, r23
 768:	e1 f7       	brne	.-8      	; 0x762 <strrev+0x4>
 76a:	32 97       	sbiw	r30, 0x02	; 2
 76c:	04 c0       	rjmp	.+8      	; 0x776 <strrev+0x18>
 76e:	7c 91       	ld	r23, X
 770:	6d 93       	st	X+, r22
 772:	70 83       	st	Z, r23
 774:	62 91       	ld	r22, -Z
 776:	ae 17       	cp	r26, r30
 778:	bf 07       	cpc	r27, r31
 77a:	c8 f3       	brcs	.-14     	; 0x76e <strrev+0x10>
 77c:	08 95       	ret

0000077e <_exit>:
 77e:	f8 94       	cli

00000780 <__stop_program>:
 780:	ff cf       	rjmp	.-2      	; 0x780 <__stop_program>
